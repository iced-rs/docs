searchState.loadedDescShard("iced", 2, "Returns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nInfer good defaults from the build type\nCreate an new instance of wgpu from a wgpu-core instance.\nCreate an new instance of wgpu from a wgpu-hal instance.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nReturns the texture aspect for a given plane.\nCreates a <code>SurfaceTargetUnsafe::RawHandle</code> from a window.\nFront face mode.\nThe face to consider the front for the purpose of culling …\nGreen component of the color\nGenerates memory report.\nGet an object representing the bind group layout at a …\nGet an object representing the bind group layout at a …\nReturns the capabilities of the surface when used with the …\nReturns the next texture to be presented by the swapchain …\nReturn a default <code>SurfaceConfiguration</code> from width and …\nGet info about the adapter itself.\nGet info about the adapter itself.\nSynchronously and immediately map a buffer for reading. If …\nSynchronously and immediately map a buffer for writing. If …\nGenerates a timestamp using the clock used by the …\nReturns the features supported for a given texture format …\nGets the amount of nanoseconds each tick of a timestamp …\nWhich OpenGL ES 3 minor version to request.\nReturns a globally-unique identifier for this <code>Surface</code>.\nReturns a globally-unique identifier for this <code>Adapter</code>.\nReturns a globally-unique identifier for this <code>Device</code>.\nReturns a globally-unique identifier for this <code>Buffer</code>.\nReturns a globally-unique identifier for this <code>Texture</code>.\nReturns a globally-unique identifier for this <code>TextureView</code>.\nReturns a globally-unique identifier for this <code>Sampler</code>.\nReturns a globally-unique identifier for this …\nReturns a globally-unique identifier for this <code>BindGroup</code>.\nReturns a globally-unique identifier for this <code>ShaderModule</code>.\nReturns a globally-unique identifier for this …\nReturns a globally-unique identifier for this …\nReturns a globally-unique identifier for this …\nReturns a globally-unique identifier for this <code>RenderBundle</code>.\nReturns a globally-unique identifier for this <code>QuerySet</code>.\nReturns a globally-unique identifier for this <code>Queue</code>.\nReturns the format features guaranteed by the WebGPU spec.\nReturns <code>true</code> if the format has a color aspect\nReturns <code>true</code> if the format has a depth aspect\nReturns true for buffer bindings with dynamic offset …\nReturns <code>true</code> if the format has a stencil aspect\nReturns the height of this <code>Texture</code>.\nHeight of the swap chain. Must be the same size as the …\nHeight of the extent\nMacro to load raw SPIR-V data statically, for use with …\nLoad WGSL source code from a file at compile time.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nInserts debug marker.\nInserts debug marker.\nInserts debug marker.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nReturns <code>true</code> if the format is a combined depth-stencil …\nReturns <code>true</code> for compressed formats.\nReturns true if the depth testing is enabled.\nReturns true if the state doesn’t mutate the depth …\nReturns <code>true</code> if <code>self</code> is a depth or stencil component of …\nReturns <code>true</code> if the format is a depth and/or stencil format\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nReturns true if the stencil test is enabled.\nReturns true if the depth biasing is enabled.\nReturns if the given range represents a full resource, …\nReturns true if this timestamp is the invalid timestamp.\nReturns <code>true</code> if the format is a multi-planar format\nReturns true if the result is <code>Self::SubmissionQueueEmpty</code>`.\nReturns true if the state doesn’t mutate the target …\nReturns true if the state doesn’t mutate either depth or …\nReturns true if the face state doesn’t mutate the target …\nReturns <code>true</code> for srgb formats.\nReturns true if the state doesn’t mutate the stencil.\nReturns true for strip topologies.\nReturns whether this adapter may present to the passed …\nThis maintain represents a wait of some kind.\nReturns true if the underlying platform offers complete …\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nDebug label for the device.\nDebug label of a buffer. This will show up in graphics …\nDebug label for the command encoder. This will show up in …\nDebug label of the render bundle encoder. This will show …\nDebug label of the texture. This will show up in graphics …\nDebug label for the query set.\nDebug label of the shader module. This will show up in …\nDebug label of the shader module. This will show up in …\nDebug label of the texture view. This will show up in …\nDebug label of the pipeline layout. This will show up in …\nDebug label of the sampler. This will show up in graphics …\nDebug label of the bind group. This will show up in …\nDebug label of the render pass. This will show up in …\nDebug label of the pipeline. This will show up in graphics …\nDebug label of the compute pass. This will show up in …\nDebug label of the pipeline. This will show up in graphics …\nDebug label of the bind group layout. This will show up in …\nDebug label of the render bundle encoder. This will show …\nDebug label of this command buffer.\nReturns the layer range of a subresource range describes …\nThe layout of the texture data in this buffer.\nThe <code>BindGroupLayout</code> that corresponds to this bind group.\nThe layout of bind groups for this pipeline.\nThe layout of bind groups for this pipeline.\nThe layout of the texture data in this buffer.\nThe best limits which can be used to create devices on …\nThe limits which can be used on this device.\nAdditional limits\nHow data should be read through this attachment.\nMaximum level of detail (i.e. mip level) to use\nMinimum level of detail (i.e. mip level) to use\nHow to filter the texture when it needs to be magnified …\nMap the buffer. Buffer is ready to map once the callback …\nMap on the wait index type.\nTakes a closure and maps the label of the command buffer …\nAllows a buffer to be mapped immediately after they are …\nBitmask that restricts the samples of a pixel modified by …\nAmount of bind groups that can be attached to a pipeline …\nMaximum binding index allowed in <code>create_bind_group_layout</code>. …\nA limit above which buffer allocations are guaranteed to …\nMaximum value of the product of the <code>workgroup_size</code> …\nThe maximum value of the workgroup_size X dimension for a …\nThe maximum value of the workgroup_size Y dimension for a …\nThe maximum value of the workgroup_size Z dimension for a …\nMaximum number of bytes used for workgroup memory in a …\nThe maximum value for each dimension of a …\nAmount of storage buffer bindings that can be dynamic in a …\nAmount of uniform buffer bindings that can be dynamic in a …\nMaximum allowed number of components (scalars) of input or …\nCalculates the maximum possible count of mipmaps.\nMaximum number of live non-sampler bindings.\nAmount of storage available for push constants in bytes. …\nAmount of sampled textures visible in a single shader …\nAmount of samplers visible in a single shader stage. …\nMaximum size in bytes of a binding to a storage buffer. …\nAmount of storage buffers visible in a single shader …\nAmount of storage textures visible in a single shader …\nMaximum allowed value for the <code>size.depth_or_array_layers</code> …\nMaximum allowed value for the <code>size.width</code> of a texture …\nMaximum allowed value for the <code>size.width</code> and <code>size.height</code> …\nMaximum allowed value for the <code>size.width</code>, <code>size.height</code>, and …\nMaximum size in bytes of a binding to a uniform buffer. …\nAmount of uniform buffers visible in a single shader …\nMaximum length of <code>VertexBufferLayout::attributes</code>, summed …\nMaximum value for <code>VertexBufferLayout::array_stride</code> when …\nMaximum length of <code>VertexState::buffers</code> when creating a …\nHow to filter the texture when it needs to be minified …\nRequired <code>BufferBindingType::Storage</code> alignment for …\nRequired <code>BufferBindingType::Uniform</code> alignment for …\nThe target mip level of the texture.\nThe target mip level of the texture.\nThe target mip level of the texture.\nThe target mip level of the texture.\nReturns the mip_level_count of this <code>Texture</code>.\nMip count of texture. For a texture with no extra mips, …\nMip level count. If <code>Some(count)</code>, <code>base_mip_level + count</code> …\nMip level count. If <code>Some(count)</code>, <code>base_mip_level + count</code> …\nCalculates the extent at a given mip level. Does <em>not</em> …\nReturns the mip level range of a subresource range …\nHow to filter between mip map levels\nThe compiled shader module for this stage.\nThe compiled shader module for this stage.\nThe compiled shader module for this stage.\nDispatches multiple draw calls from the active index …\nDispatches multiple draw calls from the active index …\nDispatches multiple draw calls from the active vertex …\nDispatches multiple draw calls from the active vertex …\nThe multi-sampling properties of the pipeline.\nIf the pipeline will be used with a multiview render pass, …\nIf this render bundle will rendering to multiple array …\nAdapter name\nReturns true if the stencil state uses the reference value …\nReturns true if the face state uses the reference value …\nReturns true if the comparison depends on the reference …\nCreate an new instance of wgpu.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nDefines where the occlusion query results will be stored …\nBase offset of the buffer, in bytes.\nByte offset of the start of the input\nOffset into the buffer that is the start of the texture. …\nRegisters a callback when the previous call to submit …\nSet a callback for errors that are not handled in error …\nThe binary operation applied to the source and destination,\nWhat operations will be performed on this color attachment.\nThe base texel of the texture in the selected <code>mip_level</code>. …\nThe base texel of the texture in the selected <code>mip_level</code>.\nThe base texel of the texture in the selected <code>mip_level</code>. …\nThe base texel of the texture in the selected <code>mip_level</code>.\nPanics if the MaintainResult is not Ok.\nOperation that is performed when stencil test success.\nCalculates the physical size backing a texture of the given\nReturns the number of planes a multi-planar format has.\nCheck for resource cleanups and mapping callbacks. Will …\nPolls all devices.\nControls the way each polygon is rasterized. Can be either …\nStops command recording and creates debug group.\nStops command recording and creates debug group.\nStops command recording and creates debug group.\nPop an error scope.\nPower preference for the adapter.\nPower preference for the adapter.\nThe premultiplication of this texture\nThe premultiplication of this texture\nSchedule this texture to be presented on the owning …\nPresentation mode of the swap chain. Fifo is the only mode …\nList of supported presentation modes to use with the given …\nThe properties of the pipeline at the primitive assembly …\nSet of push constant ranges this pipeline uses. Each …\nStart record commands and group it into debug marker group.\nStart record commands and group it into debug marker group.\nStart record commands and group it into debug marker group.\nPush an error scope.\nThe query set to write to.\nThe query set to write to.\nRed component of the color\nRange in push constant memory to use for the stage. Must …\nStencil values are AND’d with this mask when reading and …\nReturns <code>true</code> if the blend factor references the second …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nStrips the <code>Srgb</code> suffix from the given texture format.\nRetrieves an <code>Adapter</code> which matches the given …\nRequests a connection to a physical device, creating a …\nReturns the required features (if any) in order to use the …\nSpecifies the features that are required by the device …\nSpecifies the limits that are required by the device …\nResolves a query set, writing the results into the …\nThe view that will receive the resolved output if …\nResource to attach to the binding\n“Rows” that make up a single “image”.\nReturns the sample_count of this <code>Texture</code>.\nSample count of texture. If this is not 1, texture must …\nSample count this render bundle is capable of rendering …\nSample count supported by a given texture format.\nReturns the sample type compatible with this format and …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nSets the active bind group for a given bind group index. …\nSets the active bind group for a given bind group index. …\nSets the active bind group for a given bind group index. …\nSets the blend color as used by some of the blending modes.\nSet a DeviceLostCallback on this device.\nSets the active index buffer.\nSets the active index buffer.\nSets the active render pipeline.\nSets the active compute pipeline.\nSets the active render pipeline.\nSet push constant data for subsequent draw calls.\nSet push constant data for subsequent dispatch calls.\nSet push constant data.\nSets the scissor rectangle used during the rasterization …\nSets the stencil reference.\nAssign a vertex buffer to a slot.\nAssign a vertex buffer to a slot.\nSets the viewport used during the rasterization stage to …\nLocation for this input. Must match the location in the …\nWhich collections of features shaders support. Defined in …\nReturns the length of the buffer allocation in bytes.\nReturns the size of this <code>Texture</code>.\nReturns the byte size of the format.\nSize of a buffer, in bytes.\nSize of the texture. All components must be greater than …\nSize of the binding in bytes, or <code>None</code> for using the rest …\nReturns the size multiple requirement for a texture using …\nUse only a portion of this Buffer for a given operation. …\nSlope depth biasing factor.\nSource code for the shader.\nBinary SPIR-V data, in 4-byte words.\nMultiplier for the source, which is produced by the …\nStage push constant range is visible from. Each stage can …\nStarts frame capture.\nStencil state.\nWhat operations will be performed on the stencil part of …\nIf the stencil aspect of the depth stencil attachment is …\nHow often this vertex buffer is “stepped” forward.\nStops frame capture.\nWhether data will be written to through this attachment.\nWhen drawing strip topologies with indices, this is the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nSubmits a series of finished command buffers for execution.\n<code>true</code> if the acquired buffer can still be used for …\nA <code>Vec</code> of supported sample counts.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe color state of the render targets.\nThe texture to be copied to/from.\nThe texture to be copied to/from.\nAccessible view of the frame.\nThe texture to be copied to/from.\nThe texture to be copied to/from.\nDefines which timestamp values will be written for this …\nDefines which timestamp values will be written for this …\nRemoves the third dimension from this origin\nAdds the third dimension to this origin\nReturns the string name of the backend.\nAdds color space and premultiplied alpha information to …\nRemoves the colorspace information from the type.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe primitive topology used to interpret vertices.\nKind of query that this query set should contain.\nThe type of the binding\nIf set to true, the polygon depth is not clipped to 0-1 …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nFlushes any pending write operations and unmaps the buffer …\nReturns the allowed usages for this <code>Buffer</code>.\nReturns the allowed usages of this <code>Texture</code>.\nThe usage of the swap chain. The only supported usage is …\nUsages of a buffer. If the buffer is used in any way that …\nAllowed usages of the texture. If used in other ways, the …\nBitflag of supported texture usages for the surface to use …\nReturns true if the state relies on the constant color, …\nModify the current limits to use the buffer alignment …\nModify the current limits to use the resolution limits of …\nUtility structures and functions that are built on top of …\n<code>Backend</code>-specific vendor ID of the adapter\nThe compiled vertex stage, its entry point, and the input …\nMacro to produce an array of <code>VertexAttribute</code>.\nThe view to use as an attachment.\nThe view to use as an attachment.\nSpecifies what view formats will be allowed when calling …\nSpecifies what view formats will be allowed when calling …\nWhich shader stages can see this binding.\nConstruct a wait variant\nConstruct a WaitForSubmissionIndex variant\nReturns the width of this <code>Texture</code>.\nWidth of the swap chain. Must be the same size as the …\nWidth of the extent\nReturns this set of flags, affected by environment …\nSchedule a data write into <code>buffer</code> starting at <code>offset</code>.\nSchedule a data write into <code>buffer</code> starting at <code>offset</code> via …\nMask which enables/disables writes to different …\nStencil values are AND’d with this mask when writing to …\nSchedule a write of some data into a texture.\nIssue a timestamp command at this point in the queue. The …\nIssue a timestamp command at this point in the queue. The …\nIssue a timestamp command at this point in the queue. The …\nX position of the origin\nY position of the origin\nZ position of the origin\nAllowed access to this texture.\nFormat of the texture.\nIndicates that the binding has a dynamic offset.\nThe minimum size for a <code>BufferBinding</code> matching this entry, …\nTrue if the texture has a sample count greater than 1. If …\nSample type of the texture binding.\nSub-type of the buffer binding.\nDimension of the texture view that is going to be sampled.\nDimension of the texture view that is going to be sampled.\nIf <code>true</code>, the buffer can only be read in the shader, and it:\nPath to the <code>dxcompiler.dll</code> file, or path to the directory …\nPath to the <code>dxil.dll</code> file, or path to the directory …\nDescription of the validation error.\nLower level source of the error.\nLower level source of the error.\nRaw display handle, underlying display must outlive the …\nRaw display handle, underlying window must outlive the …\ncompressed block dimensions\nASTC RGBA channel\nIf this is <code>false</code>, the texture can’t be sampled with a …\nNo value.\nSome value of type <code>T</code>.\nDispatch on an <code>Id</code>’s backend to a backend-generic method.\nAllocating resource ids, and tracking the resources they …\nPresentation.\nA <code>Arc</code> of a <code>HalSurface&lt;A&gt;</code>, for any backend <code>A</code>.\nIf <code>self</code> is an <code>Arc&lt;HalSurface&lt;A&gt;&gt;</code>, return a reference to the\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturn an <code>AnySurface</code> that holds an owning <code>Arc</code> to <code>HalSurface</code>…\nIf <code>self</code> is an <code>Arc&lt;HalSurface&lt;A&gt;&gt;</code>, returns that.\nDescribes a group of bindings and the resources to be …\nBindable resource and the slot to bind it to.\nBind group layout.\nDescribes a <code>BindGroupLayout</code>.\nDescribes a pipeline layout.\nBind groups that this pipeline uses. The first entry will …\nSlot for which binding provides resource. Corresponds to …\nThe resources to bind to this bind group.\nArray of entries in this BindGroupLayout\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDebug label of the bind group.\nDebug label of the bind group layout.\nDebug label of the pipeine layout.\nThe <code>BindGroupLayout</code> that corresponds to this bind group.\nSet of push constant ranges this pipeline uses. Each …\nResource to attach to the binding\nDescribes an attachment location in words.\nClear the output attachment with the clear color. Clearing …\nError encountered while attempting a clear.\nError encountered when performing a compute pass.\nError encountered when performing a compute pass.\nDescribes the writing of timestamp values in a compute …\nError encountered while attempting to do a copy on a …\nError type returned from <code>RenderBundleEncoder::new</code> if the …\nDiscards the content of the render target.\nError validating a draw call.\nError type returned from <code>RenderBundleEncoder::new</code> if the …\nDo not clear output attachment.\nOperation to perform to the output attachment at the start …\nDescribes an individual channel within a render pass, such …\nError encountered when dealing with queries\nError encountered while trying to use queries\nDescribes a <code>RenderBundleEncoder</code>.\nError encountered when finishing recording a render bundle.\nError encountered when encoding a render command. This is …\nDescribes a color attachment to a render pass.\nDescribes a depth/stencil attachment to a render pass.\nDescribes the attachments of a render pass.\nError encountered when performing a render pass.\nError encountered when performing a render pass.\nLocation to write a timestamp to (beginning or end of the …\nDescribes the writing of timestamp values in a render pass.\nError encountered while trying to resolve a query.\nStore the result of the renderpass.\nOperation to perform to the output attachment at the end …\nError encountered while attempting a data transfer.\nThe copy aspect.\nThe copy aspect.\nThe index of the query set at which a start timestamp of …\nThe index of the query set at which a start timestamp of …\nThe buffer to be copied to/from.\nWhat operations will be performed on this color attachment.\nIf load_op is <code>LoadOp::Clear</code>, the attachment will be …\nThe color attachments of the render pass.\nThe formats of the color attachments that this render …\nThe color space of this texture.\nWhat operations will be performed on the depth part of the …\nInformation about the depth attachment that this render …\nThe depth and stencil attachment of the render pass, if …\nThe index of the query set at which an end timestamp of …\nThe index of the query set at which an end timestamp of …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDebug label of the render bundle encoder. This will show …\nDebug label of the render bundle encoder.\nThe layout of the texture data in this buffer.\nOperation to perform to the output attachment at the start …\nThe target mip level of the texture.\nThe target mip level of the texture.\nIf this render bundle will rendering to multiple array …\nDefines where the occlusion query results will be stored …\nThe base texel of the texture in the selected <code>mip_level</code>. …\nThe base texel of the texture in the selected <code>mip_level</code>.\nThe premultiplication of this texture\nThe query set to write the timestamps to.\nThe query set to write the timestamp to.\nIf true, the relevant channel is not changed by a …\nThe view that will receive the resolved output if …\nSample count this render bundle is capable of rendering to.\nWhat operations will be performed on the stencil part of …\nOperation to perform to the output attachment at the end …\nThe texture to be copied to/from.\nThe texture to be copied to/from.\nDefines where and when timestamp values will be written …\nDefines where and when timestamp values will be written …\nThe view to use as an attachment.\nThe view to use as an attachment.\nSafety\nSafety\nSafety\nSafety\nSafety\nSafety\nSafety\nSafety\nSafety\nSafety\nSafety\nSafety\nSafety\nStructure describing a logical device. Some members are …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nSafety\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDebug label for the device.\nSpecifies the features that are required by the device …\nSpecifies the limits that are required by the device …\nA pointer to a <code>Device&lt;A&gt;</code>, for any backend <code>A</code>.\nIf <code>self</code> is an <code>Arc&lt;Device&lt;A&gt;&gt;</code>, return a clone of that.\nIf <code>self</code> is an <code>Arc&lt;Device&lt;A&gt;&gt;</code>, return a reference to the …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturn an <code>AnyDevice</code> that holds an owning <code>Arc</code> pointer to …\nA texture or buffer to be freed soon.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nSafety\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nStructure describing a logical device. Some members are …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSafety\nGet an ID of one of the bind group layouts. The ID adds a …\nSafety\nAssign <code>id_in</code> an error with the given <code>label</code>.\nSafety\nSafety\nAssign <code>id_in</code> an error with the given <code>label</code>.\nSafety\nSafety\nSafety\nSafety\nCheck <code>device_id</code> for freeable resources and completed …\nReturns the argument unchanged.\nReturns the argument unchanged.\nSafety\nSafety\nSafety\nSafety\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nPoll all devices on all backends.\nGet an ID of one of the bind group layouts. The ID adds a …\nSafety\nSafety\nAll the resources for a particular backend in a …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAn identifier for a wgpu object.\nTrait carrying methods for direct <code>Id</code> access.\nReturns the argument unchanged.\nSafety\nCalls <code>U::from(self)</code>.\nA factory that can build <code>IdentityManager</code>s for all resource …\nA type that can produce <code>IdentityManager</code> filters for ids of …\nA global identity handler factory based on <code>IdentityManager</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate an <code>IdentityManager&lt;I&gt;</code> implementation that can …\nError when requesting a device from the adaptor\nSurface that is required to be presentable with the …\nIndicates that only a fallback adapter can be returned. …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGenerates a set of backends from a comma separated list of …\nPower preference for the adapter.\nWidth of abstract types, in bytes.\nAbstract floating-point type.\nWGSL abstract integer type.\nOpaque object representing an acceleration structure of …\nArray access with a computed index.\nAccess the same types as <code>Access</code>, plus <code>Struct</code> with a known …\nAddressing space of variables.\nAn arena holding some kind of component (e.g., type, …\nHomogenous list of elements.\nGet the length of an array. The expression must resolve to …\nSize of an array.\nCast a simple type to another kind.\nAtomic scalar.\nAtomic function.\nFunction on an atomic value.\nResult of an atomic operation.\nWidth of a boolean type, in bytes.\nMemory barrier flags.\nSynchronize invocations within the work group. The <code>Barrier</code> …\n2D vector\nApply a binary operator.\nOperation that can be applied on two values.\nDescribes how an input/output variable is to be bound.\nArray of bindings.\nA code block is a vector of statements, with maybe a …\nA block containing more statements, to be executed …\nBoolean type.\nExits the innermost enclosing <code>Loop</code> or <code>Switch</code>.\nBuilt-in inputs and outputs.\nBuilt-in shader variable.\nNumber of bytes per scalar.\nCalls a function.\nResult of calling another function.\nInterpolate the value at the center of the pixel.\nInterpolate the value at a point that lies within all …\nComposite expression.\nEnables adjusting depth without disabling early Z.\nConstant value.\nThe array size is constant.\nConstant value.\nSkips to the <code>continuing</code> block of the innermost enclosing …\nCube map\n1D image\n2D image\n3D image\nDepth comparison image.\nCompute the derivative on an axis.\nAxis on which to compute a derivative.\nHint at which precision to compute a derivative.\nThe array size can change at runtime.\nEarly fragment tests.\nEmit a range of expressions, visible to all statements …\nThe main function for a pipeline stage.\nAn expression that can be evaluated to obtain a value.\nMay not be NaN or infinity.\nMay not be NaN or infinity.\nHash map that is faster but not resilient to DoS attacks.\nHash set that is faster but not resilient to DoS attacks.\nInsertion-order-preserving hash map (<code>IndexMap&lt;K, V&gt;</code>), but …\nInsertion-order-preserving hash set (<code>IndexSet&lt;K&gt;</code>), but …\nIndicates that no interpolation will be performed.\nFloating point type.\nA function defined in the module.\nFunction locals.\nA function argument.\nReference a function parameter, by its index.\nA function result.\nVariable defined at module level.\nReference a global variable.\nShader may rewrite depth only with a value greater than …\nA strongly typed reference to an arena item.\nOpaque handles, such as samplers and images.\nConditionally executes one of two blocks, based on the …\nPossibly multidimensional array of texels.\nSub-class of the image type.\nThe number of dimensions an image has.\nLoad a texel from an image.\nType of an image query.\nQuery information from an image.\nSample a point from a sampled or a depth image.\nStores a texel value to an image.\nInitialize the <code>RayQuery</code> object.\nThe interpolation qualifier of a binding or struct field.\nAborts the current shader execution.\nStorage can be used as a source for load ops.\nShader may rewrite depth smaller than one that would have …\nIndicates that linear, non-perspective, correct …\nLiteral.\nLoad a value indirectly.\nVariable defined at function level.\nReference a local variable.\nIndexed location.\nExecutes a block repeatedly.\nCall a math function\nBuilt-in shader function for math.\nMatrix of numbers.\nShader module.\nEquivalent of the WGSL’s <code>%</code> operator or SPIR-V’s <code>OpFRem</code>\nGet the number of array layers.\nGet the number of mipmap levels.\nGet the number of samples.\nThe value will be interpolated in a perspective-correct …\nPointer to another type.\nReturn types predeclared for the frexp, modf, and …\nPrivate data, per invocation, mutable.\nStart or continue the query given by the statement’s …\nPush constants.\n4D vector\nA strongly typed range of handles.\nLocally used handle for ray queries.\nAn operation that a <code>RayQuery</code> statement applies to its <code>query</code>…\nReturn an intersection found by <code>query</code>.\nResult of a <code>Proceed</code> <code>RayQuery</code> statement.\nCall a relational function.\nBuilt-in shader function for testing relation between …\nPipeline binding information for global resources.\nReturns from the function (possibly with a value).\nBarrier affects all <code>AddressSpace::Storage</code> accesses.\nStorage can be used as a target for store ops.\nInterpolate the value at each sample location. In …\nSampling modifier to control the level of detail.\nRegular sampled image.\nCan be used to sample values from images.\nThe sampling qualifiers of a binding or struct field.\nCharacteristics of a scalar type.\nNumber of integral or floating-point kind.\nPrimitive type for a scalar.\nSelect between two values based on a condition.\nStage of the programmable pipeline.\nRight shift carries the sign of signed integers only.\nSigned integer type.\nGet the size at the specified level.\nA human-readable representation for a span, tailored for …\nA source code span, used for error reporting.\nA source code span together with “context”, a …\nSet of special types that can be optionally generated by …\nSplat scalar into a vector.\nInstructions which make up an executable block.\nStorage buffer data, potentially mutable.\nStorage image.\nFlags describing an image.\nImage storage format.\nStores a value at an address.\nUser-defined structure.\nMember of a user-defined structure.\nConditionally executes one of multiple blocks, based on …\nA case for a switch statement.\nThe value of the switch case.\nVector swizzle.\nComponent selection for a vector swizzle.\n3D vector\nA data type declared in the module.\nEnum with additional information, depending on the kind of …\nUnsigned integer type.\nApply an unary operator.\nOperation that can be applied on a single value.\nShader may not rewrite depth value.\nUniform buffer data.\nAn arena whose elements are guaranteed to be unique.\nPointer to a scalar or vector.\nVector of numbers.\nNumber of components in a vector.\nBarrier affects all <code>AddressSpace::WorkGroup</code> accesses.\nWrapper class for <code>Error</code>, augmenting it with a list of …\nWorkgroup shared data, mutable.\nLoad uniformly from a uniform pointer in the workgroup …\nResult of a <code>WorkGroupUniformLoad</code> statement.\nZero value of a type.\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nConvert inner error into another type. Joins span …\nAdds a new value to the arena, returning a typed handle.\nApply the usual default interpolation for <code>ty</code> to <code>binding</code>.\nInformation about function argument.\nFind the common type of <code>self</code> and <code>other</code> under WGSL’s …\nReturn <code>true</code> if automatic conversions will covert <code>self</code> to …\nBackend functions that export shader <code>Module</code>s into binary …\nFor I/O structs, defines the binding.\nBinding number within the group.\nFor resources, defines the binding point.\nFor entry points, an argument has to have a binding unless …\nFor entry points, the result has to have a binding unless …\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nBody of the case.\nBlock of instructions comprising the body of the function.\nReturn the canonical form of <code>self</code>, or <code>None</code> if it’s …\nAssert that <code>handle</code> is valid for this arena.\nAssert that <code>handle</code> is valid for this arena.\nAssert that <code>range</code> is valid for this arena.\nClears the arena keeping all allocations\nClears the arena, keeping all allocations.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nConstant expressions and override expressions used by this …\nArena for the constants defined in this module.\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nEarly depth test for fragment stages.\nEmits a summary of the error to standard error stream.\nEmits a summary of the error to standard error stream.\nEmits a summary of the error to a string.\nEmits a summary of the error to a string.\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nEntry points.\nCompare <code>self</code> and <code>rhs</code> as types.\nExpressions used inside this function.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nIf true, the control flow continues to the next case in …\nFetch a handle to an existing type.\nAdds a value with a custom check for uniqueness: returns a …\nAdds a value with a check for uniqueness, where the check …\nreturn the first and last handles included in <code>self</code>.\nConstruct a float <code>Scalar</code> with the given width.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nConstruct a <code>Range</code> that covers the zero-based indices in …\nFrontend parsers that consume binary and text shaders and …\nThe entrance function.\nArena for the functions defined in this module.\nPopulate this module’s <code>SpecialTypes::predeclared_types</code> …\nPopulate this module’s <code>SpecialTypes::ray_desc</code> type.\nPopulate this module’s <code>SpecialTypes::ray_intersection</code> …\nReturn this arena’s handle for <code>value</code>, if present.\nReturn this arena’s value at <code>handle</code>, if that is a valid …\nGet a mutable reference to an element in the arena.\nReturn the span associated with <code>handle</code>.\nArena for the global variables defined in this module.\nThe bind group index.\nReturns the zero-based index of this handle.\nReturn the length of a subscriptable type.\nThe value of the constant.\nInitial value for this variable.\nInitial value for this variable.\nInner structure that depends on the kind of the type.\nInsert a new value into the arena.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nExtracts the inner vector.\nReverse of <code>Self::new</code>, discards span information and …\nConvert inner error using <code>From</code>.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nCheck whether <code>self</code> was defined or is a default/unknown span\nReturn true if this expression is a dynamic array index, …\nReturns <code>true</code> if the arena contains no elements.\nReturn <code>true</code> if the arena contains no elements.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nReturns true if the statement directly terminates the …\nReturns an iterator over the items stored in this arena, …\nReturns an iterator over the items stored in this arena, …\nYield a set of contained flags values.\nYield a set of contained flags values.\nReturns a iterator over the items stored in this arena, …\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nLists of reserved keywords for each shading language with …\nHow the value’s bits are to be interpreted.\nReturns the current number of items stored in this arena.\nReturn the current number of items stored in this arena.\nLength in code units (in bytes) of the span.\n1-based line number.\n1-based column of the start of this span\nLocal variables defined and used in the function.\nReturn a <code>SourceLocation</code> for this span in the provided …\nReturn a <code>SourceLocation</code> for our first span, if we have one.\nThe name of the type, if any.\nName of the variable, if any.\nName of the variable, if any.\nName of the argument, if any.\nName of the function, if any.\nName of this entry point, visible externally.\nMap of expressions that have associated variable names\nReturns true if the expression is considered emitted at …\nCreate a new arena with no initial capacity allocated.\nCreate a new arena with no initial capacity allocated.\nCreates a new <code>Span</code> from a range of byte indices\nCreate a new <code>WithSpan</code> from an <code>Error</code>, containing no spans.\nReturn a range enclosing handles <code>first</code> through <code>last</code>, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\n0-based Offset in code units (in bytes) of the start of …\nOffset from the beginning from the struct.\nReturn the global variable being accessed by the …\nTypes for predeclared wgsl types instantiated on demand.\n<code>Module</code> processing functionality.\nGet the range of handles from a particular number of …\nType for <code>RayDesc</code>.\nType for <code>RayIntersection</code>.\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nReplace an old value with a new value.\nThe result of this function, if any.\nReturn the scalar type of <code>self</code>.\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nGet the size of this type.\nHow this variable is to be stored.\nIterator over stored <code>SpanContext</code>s.\nDictionary of special type handles.\nShader stage.\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nModifies <code>self</code> to contain the smallest <code>Span</code> possible that …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nConverts <code>self</code> to a range if the span is not unknown\nFormats the type as it is written in wgsl.\nFormat a scalar kind+width as a type is written in wgsl.\nFormats the type as it is written in wgsl.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nReturns the smallest <code>Span</code> possible that contains all the …\nType of the field.\nThe type of this variable.\nThe type of this variable.\nType of the argument.\nType of the result.\nArena for the types defined in this module.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nReturns a new <code>Span</code> starting at <code>self</code> and ending at <code>other</code>\nShader validator.\nValue, upon which the case is considered true.\nThis size of the value in bytes.\nAdd a <code>SpanContext</code>.\nAdd a new span with description.\nWorkgroup size for compute stages\nReturn the zero-based index range covered by <code>self</code>.\nIndicates the 2nd input to the blender when dual-source …\nThe index into an arrayed image. If the <code>arrayed</code> flag in …\nBoolean expression\nIf provided, converts to the specified byte width. …\nThe coordinate of the texel we wish to load. This must be …\nSource expression, which can only be a scalar or a vector.\nIf Some(), this operation is a gather operation on the …\nThe image to load a texel from. This must have type <code>Image</code>. …\nTarget scalar kind.\nA level of detail, for mipmapped images.\nExpression handle lives in const_expressions\nA sample index, for multisampled <code>Sampled</code> and <code>Depth</code> images.\nThe type of the result\nKind of values to sample.\nMulti-sampled image.\nMulti-sampled depth image.\nIf <code>None</code>, the base level is considered.\nThe acceleration structure within which this query should …\nA struct of detailed parameters for the ray query.\nFunction to run on the atomic.\nThe specific operation we’re performing on <code>query</code>.\nPointer to an atomic value.\nThis must be of type <code>Pointer</code> in the <code>WorkGroup</code> address space\nThe <code>RayQuery</code> object this statement operates on.\n<code>AtomicResult</code> expression representing this function’s …\nThe <code>WorkGroupUniformLoadResult</code> expression representing …\nValue to use in the function.\nRay flags, for a <code>RayDesc</code>’s <code>flags</code> field.\nGet a flags value with all known bits set.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\nThe intersection of a source flags value with the …\nGet a flags value with all bits unset.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nBackend for GLSL (OpenGL Shading Language).\nBackend for HLSL (High-Level Shading Language).\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nBackend for MSL (Metal Shading Language).\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe intersection of a source flags value with the …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nBackend for SPIR-V (Standard Portable Intermediate …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nFlip output Y and extend Z from (0, 1) to (-1, 1).\nBuffer address space support.\nMapping between resources and bindings.\n8 byte floats.\nSupports ARB_shader_draw_parameters on the host, which …\nDual source blending\nArrays with a dynamic length.\n<code>core</code> GLSL.\n<code>es</code> GLSL.\nThe entry point couldn’t be found.\nA GLSL compilation error.\nEmit <code>PointSize</code> output builtin to vertex shaders, which is …\nMore image formats.\nStructure used to encode additions to GLSL that aren’t …\nA error occurred while writing to the output.\nImage load and early depth tests.\nImage size query\nInclude unused global variables, constants and functions. …\nInstance index\nA image was used with multiple samplers, which isn’t …\nThe specified <code>Version</code> doesn’t have all required <code>Features</code>.\n<code>AddressSpace::PushConstant</code> was used more than once in the …\nInterpolation and auxiliary qualifiers.\nConfiguration used in the <code>Writer</code>.\nA subset of options meant to be changed per pipeline.\nAll information to bind a single uniform value to the …\nReflection info for texture mappings and uniforms.\nSample ID.\nList of supported <code>core</code> GLSL versions.\nList of supported <code>es</code> GLSL versions.\nTexture levels query\nTexture samples query\nSample specific LODs of cube / array shadow textures\nSupports GL_EXT_texture_shadow_lod on the host, which …\nMapping between a texture and its sampler, if it exists.\nA call was made to an unsupported external.\nA scalar with an unsupported width was requested.\nA GLSL version.\nThe specified <code>Version</code> isn’t supported.\nWriter responsible for all code generation.\nConfiguration flags for the <code>Writer</code>.\nGL uniform name for the item. This name is the same as if …\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nMap of resources association to binding locations.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nThe name of the entry point.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nThe index which can be used for dual source blending. This …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nThe location of the global. This corresponds to …\nHow many views to render to, if doing multiview rendering.\nCreates a new <code>Writer</code> instance.\nCreate a new gles version\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe offset in the push constant memory block this uniform …\nList of push constant items in the shader.\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nHandle to the associated sampler global variable, if it …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nThe stage of the entry point.\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nHandle to the image global variable.\nMapping between texture names and variables/samplers.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nType of the uniform. This will only ever be a scalar, …\nMapping between uniform variables and names.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nMapping between names and attribute locations.\nThe GLSL version to be used.\nWrites the <code>Module</code> as glsl to the output\nConfiguration flags for the <code>Writer</code>.\nShould workgroup variables be zero initialized (by …\nConfiguration used in the <code>Writer</code>.\nReflection info for entry point names.\nA HLSL shader model version.\nIf the binding is an unsized binding array, this overrides …\nMap of resources association to binding locations.\nMapping of the entry point names.\nDon’t panic on missing bindings, instead generate any …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nBind target of the push constant buffer\nThe hlsl shader model to be used\nAdd special constants to <code>SV_VertexIndex</code> and …\nShould workgroup variables be zero initialized (by …\nA subset of options that are meant to be changed per …\nInformation about a translated module that is required for …\nAllow <code>BuiltIn::PointSize</code> and inject it if doesn’t exist.\nIf the binding is an unsized binding array, this overrides …\nBounds checking policies.\nMapping of the entry point names. Each item in the array …\nDon’t panic on missing bindings, instead generate …\nFinishes writing and returns the output.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nSamplers to be inlined into the code.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n(Major, Minor) target version of the Metal Shading …\nCreates a new <code>Writer</code> instance.\nMap of entry-point resources, indexed by entry point …\nThe slot of a buffer that contains an array of <code>u32</code>, one …\nMake it possible to link different stages via SPIRV-Cross.\nShould workgroup variables be zero initialized (by …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nFlip Y coordinate of <code>BuiltIn::Position</code> output.\nClamp <code>BuiltIn::FragDepth</code> output between 0 and 1.\nSPIR-V operand kind: Capability\nInclude debug labels for everything.\nEmit <code>PointSize</code> output builtin to vertex shaders, which is …\nFlags corresponding to the boolean(-ish) parameters to …\nEmit <code>OpName</code> for input/output locations. Contrary to spec, …\nVia <code>VK_KHR_zero_initialize_workgroup_memory</code> or Vulkan 1.3\nVia assignments + barrier\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nIf the binding is an unsized binding array, this overrides …\nMap of resources to information about the binding.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nHow should generate code handle array, vector, matrix, or …\nIf given, the set of capabilities modules are allowed to …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nThe name of the entry point.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nConfiguration flags for the writer.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nReturn the set of capabilities the last module written …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\n(Major, Minor) target version of the SPIR-V.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nThe stage of the entry point.\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nDictates the way workgroup variables should be zero …\nRemove unused types, expressions, and constants from <code>module</code>…\nStructure responsible for managing variable lookups and …\nA table of types for an <code>Arena&lt;Expression&gt;</code>.\nAdds a new variable to the current scope.\nAdds a new variable to the root scope.\nConstructs a new symbol table with a root scope\nReturns the argument unchanged.\nReturns the argument unchanged.\nGrow this typifier until it contains a type for <code>expr_handle</code>…\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRecompute the type resolution for <code>expr_handle</code>.\nPerform a lookup for a variable named <code>name</code>.\nRemoves the current lexical scope and all its variables\nAdds a new lexical scope.\nAdd an expression’s type to an <code>Arena&lt;Type&gt;</code>.\nFrontend for WGSL (WebGPU Shading Language).\nEmits a summary of the error to standard error stream.\nEmits a summary of the error to standard error stream.\nEmits a summary of the error to a string.\nEmits a summary of the error to a string.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns a <code>SourceLocation</code> for the first label in the error …\nKeywords for WGSL (WebGPU Shading Language).\nA newtype struct where its only valid values are powers of …\nPolicies for injecting bounds checks during code …\nHow should code generated by Naga do bounds checks?\nA context for evaluating constant expressions.\nThe number of elements is determined at runtime.\nHelper class to emit expressions\nA type stored in the associated arena.\nThe number of elements in an indexable type.\nValues of this type always have the given number of …\nHelper processor that derives the sizes of all types.\nThis processor assigns names to all the things in a module …\nOut-of-bounds reads return zero, and writes have no effect.\nReplace out-of-bounds indexes with some arbitrary …\nSize and alignment information for a type.\nThe result of computing an expression’s type.\nNaga adds no checks to indexing operations. Generate the …\nA free-floating <code>TypeInner</code>, representing a type that may …\nHow should the generated code handle binding array indexes …\nHow should the generated code handle array, vector, or …\nReturn a new identifier based on <code>label_raw</code>.\nConvert the scalar components of <code>expr</code> to <code>target</code>.\nConvert the scalar leaves of  <code>expr</code> to <code>target</code>, handling …\nDetermine which policy applies to <code>base</code>.\nRemove all entries from this <code>Layouter</code>, retaining storage.\nReturn <code>true</code> if any of <code>self</code>’s policies are <code>policy</code>.\nEnsure that the given block has return statements at the …\nReturn an iterator over the individual components …\nReturn a <code>ConstantEvaluator</code> that will add expressions to …\nReturn a <code>ConstantEvaluator</code> that will add expressions to …\nReturn a <code>ConstantEvaluator</code> that will add expressions to …\nReturn a <code>ConstantEvaluator</code> that will add expressions to …\nForces the the expression to not be const\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nPanics\nHow should the generated code handle image texel loads …\nHow should the generated code handle image texel stores …\nDefinitions for index bounds checking.\nHow should the generated code handle array, vector, or …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns whether or not <code>n</code> is a multiple of this alignment.\nDetermine the type of <code>expr</code>.\nRound <code>n</code> up to the nearest alignment boundary.\nProduce the stride as if this type is a base of an array.\nTry to evaluate <code>expr</code> at compile time.\nExtend this <code>Layouter</code> with layouts for any new entries in …\nInitialize a resolve context from the module.\nPolicies for injecting bounds checks during code …\nHow should code generated by Naga do bounds checks?\nThe number of elements is determined at runtime.\nAn index that may be statically known, or may need to be …\nThe number of elements in an indexable type.\nValues of this type always have the given number of …\nOut-of-bounds reads return zero, and writes have no effect.\nReplace out-of-bounds indexes with some arbitrary …\nNaga adds no checks to indexing operations. Generate the …\nDetermine whether <code>index</code> is statically known to be in …\nHow should the generated code handle binding array indexes …\nHow should the generated code handle array, vector, or …\nBuild a set of expressions used as indices, to cache in …\nReturns the argument unchanged.\nHow should the generated code handle image texel loads …\nHow should the generated code handle image texel stores …\nHow should the generated code handle array, vector, or …\nCalls <code>U::from(self)</code>.\nThis type can be passed as a function argument.\nGroup, binding, and location attributes.\nStatements and blocks of them.\nSupport for [<code>Builtin::ClipDistance</code>].\nConstants.\nA WGSL constructible type.\nUniformity of control flow for operations that require it.\nThe data can be copied around.\nSupport for arrayed cube textures.\nSupport for [<code>Builtin::CullDistance</code>].\nAllowed IR capabilities.\nCan be used for data variables.\nSupport for generating two sources for blending from …\nSupport for <code>early_depth_test</code>.\nExpressions.\nFloat values with width = 8.\nIndicates how a global variable is used.\nCan be used for host-shareable structures.\nCan be be used for user-defined IO between pipeline stages.\nSupport for [<code>Builtin::SampleIndex</code>] and [<code>Sampling::Sample</code>].\nSupport for [<code>BuiltIn::ViewIndex</code>].\nSupport for [<code>Builtin:PrimitiveIndex</code>].\nSupport for [<code>AddressSpace:PushConstant</code>].\nThe information about the data is queried.\nSupport for ray queries and acceleration structures.\nData will be read from the variable.\nSupport for non-uniform indexing of sampled textures and …\nSupport for non-uniform indexing of samplers.\nThe data type has a size known by pipeline creation time.\nSupport for 16-bit normalized storage texture formats.\nHost-shareable structure layouts.\nValidation flags.\nFlags associated with <code>Type</code>s by <code>Validator</code>.\nSupport for non-uniform indexing of uniform buffers and …\nUniform control flow characteristics.\nKinds of expressions that require uniform control flow.\nValidation flags.\nData will be written to the variable.\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nSet of shader stages where calling this function is valid.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nGet the underlying bits value.\nGet the underlying bits value.\nGet the underlying bits value.\nGet the underlying bits value.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nIndicates that the function is using dual source blending.\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nFunction may kill the invocation.\nConstruct a new validator instance.\nA child expression with non-uniform result.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nIf this expression requires uniform control flow, store …\nReset the validator internals\nAll pairs of (texture, sampler) globals that may be used …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nUniformity characteristics.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nCheck the given module to be valid.\nDescribes a compute pipeline.\nDescribes fragment processing in a render pipeline.\nNumber of implicit bind groups derived at pipeline …\nDescribes a programmable pipeline stage.\nDescribes a render (graphics) pipeline.\nDescribes how the vertex buffer is interpreted.\nDescribes the vertex process in a render pipeline.\nHow a render pipeline will retrieve attributes from a …\nGet a flags value with all known bits set.\nThe stride, in bytes, between elements of this buffer.\nThe list of attributes which comprise a single vertex.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe format of any vertex buffers used with this pipeline.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\nThe effect of draw calls on the depth and stencil aspects …\nThe intersection of a source flags value with the …\nGet a flags value with all bits unset.\nThe name of the entry point in the compiled shader. There …\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe fragment processing state for this pipeline.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nThe layout of bind groups for this pipeline.\nThe layout of bind groups for this pipeline.\nWhether the buffer is indexed by vertex number or instance …\nThe compiled shader module for this stage.\nThe multi-sampling properties of the pipeline.\nIf the pipeline will be used with a multiview render pass, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe properties of the pipeline at the primitive assembly …\nThe intersection of a source flags value with the …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nThe compiled compute stage and its entry point.\nThe compiled vertex stage and its entry point.\nThe compiled fragment stage and its entry point.\nHow often this vertex buffer is “stepped” forward.\nThe byte stride in the buffer between one attribute value …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe effect of draw calls on the color aspect of the output …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe vertex processing state for this pipeline.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRegistry is the primary holder of each resource type Every …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMapping was aborted (by unmapping or destroying the buffer …\nThe buffer is already mapped.\nThe status code provided to the buffer mapping callback.\nThe context is Lost.\nA buffer that has been marked as destroyed and is staged …\nA texture that has been marked as destroyed and is staged …\nContains the error value\nAn unknown error.\nThe buffer is in an invalid state.\nThe range isn’t properly aligned.\nThe range isn’t fully contained in the buffer.\nIncompatible usage flags.\nMapping was already requested.\nAddressMode::ClampToBorder requires feature …\nContains the success value\nInformation about the wgpu-core resource.\nDescribes a <code>Sampler</code>\nA temporary buffer, consumed by the command that uses it.\nThe Buffer is sucessfully mapped, <code>get_mapped_range</code> can be …\nDescribes a <code>TextureView</code>.\nHow to deal with out of bounds accesses in the u (i.e. x) …\nMust be at least 1. If this is not 1, all filter modes …\nBorder color to use when address_mode is …\nIf this is enabled, this is a comparison sampler using the …\nTotal count of queries the set contains. Must not be zero. …\nDimensions of the texture.\nThe dimension of the texture view.\nFormat of the texture.\nFormat of the texture view, or <code>None</code> for the same format as …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nSafety\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDebug label of a buffer. This will show up in graphics …\nDebug label of the texture. This will show up in graphics …\nDebug label for the query set.\nDebug label of the texture view.\nDebug label of the sampler.\nMaximum level of detail (i.e. mip level) to use\nMinimum level of detail (i.e. mip level) to use\nHow to filter the texture when it needs to be magnified …\nAllows a buffer to be mapped immediately after they are …\nHow to filter the texture when it needs to be minified …\nMip count of texture. For a texture with no extra mips, …\nHow to filter between mip map levels\nRange within the texture that is accessible via this view.\nSample count of texture. If this is not 1, texture must …\nSize of a buffer, in bytes.\nSize of the texture. All components must be greater than …\nKind of query that this query set should contain.\nUsages of a buffer. If the buffer is used in any way that …\nAllowed usages of the texture. If used in other ways, the …\nSpecifies what view formats will be allowed when calling …\nA table of <code>T</code> values indexed by the id type <code>I</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe binding layout is derived from the pipeline layout.\nThe binding layout is provided by the user in BGLs.\nErrors produced when validating a programmable stage of a …\nChecks that the given buffer usage contains the required …\nReturn true if the fragment <code>format</code> is covered by the …\nChecks that the given texture usage contains the required …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAllow the acceleration structure to be compacted in a copy …\nAllow for incremental updates (no change in size)\n<code>offset</code> - offset in bytes\nFlags for acceleration structures\nInformation of the required size for a corresponding …\nEntries for a single descriptor\nFlags for acceleration structure geometries\n<code>offset</code> - offset in bytes\n<code>offset</code> - offset in bytes\n<code>offset</code> - offset in bytes\n<code>first_vertex</code> - offset in the vertex buffer (as number of …\nBindGroup descriptor.\nBindGroupLayout descriptor.\nPipeline layout creation flags.\nSimilar to <code>wgt::BufferUsages</code> but for internal use.\nUpdates use source_acceleration_structure if present, else …\nFormat can be used as color and input attachment.\nFormat can be used as color (with blending) and input …\nThe color target of a renderpass.\nFlag used by the wgpu-core texture tracker to say a …\nFormat can be copied to.\nThe destination of a hardware copy.\nThe destination of a hardware copy.\nFormat can be copied from.\nThe source of a hardware copy.\nThe source of a hardware copy.\nEncoder for commands in command buffers. Serves as a …\nDescribes a compute pipeline.\nFormat can be used as depth-stencil and input attachment.\nRead-only depth stencil usage.\nRead-write depth stencil usage\nDrop guard to signal wgpu-hal is no longer using an …\nThe combination of states that a buffer must exclusively …\nThe combination of states that a texture must exclusively …\nInclude support for <code>first_vertex</code> / <code>first_instance</code> drawing.\nTexture format capability flags.\nAll buffers, buffer addresses and offsets will be ignored.…\nThe combination of states that a buffer may be in <em>at the </em>…\nThe combination of states that a texture may be in <em>at the </em>…\nThe index buffer used for drawing.\nThe indirect or count buffer in a indirect draw or …\nError occurring while trying to create an instance, or …\nOptimize for low memory footprint (scratch and output)\nThe argument to a read-only mapping.\nThe argument to a write-only mapping.\nFormat can be used for render pass resolve targets.\nFormat can be multisampled by x16.\nFormat can be multisampled by x2.\nFormat can be multisampled by x4.\nFormat can be multisampled by x8.\nNO_DUPLICATE_ANY_HIT_INVOCATION\nInclude support for num work groups builtin.\nNaga shader module.\nNo value.\nIs OPAQUE\nThe combination of all usages that the are guaranteed to …\nThe combination of all usages that the are guaranteed to …\nAllows for bind group binding arrays to be shorter than …\nOptimize for fast build time\nOptimize for fast ray tracing performance\nReady to present image to the surface.\nPipeline layout creation flags.\nDescribes a programmable pipeline stage.\nA buffer used to store query results.\nSize of a single occlusion/timestamp query, when copied …\nRead-only sampled or fetched resource.\nDescribes a render (graphics) pipeline.\nFormat can be sampled.\nFormat can be sampled with a linear sampler.\nFormat can be sampled with a min/max reduction sampler.\nFormat can be used as storage with write-only access.\nFormat can be used as storage with atomics.\nA read-only storage buffer used in a bind group.\nRead-only storage buffer usage. Corresponds to a UAV in …\nFormat can be used as storage with read and read/write …\nA read-write or write-only buffer used in a bind group.\nRead-write or write-only storage buffer usage.\nShader input.\nSome value of type <code>T</code>.\nDescribes information about what a <code>Surface</code>’s …\nTexture format capability flags.\nSimilar to <code>wgt::TextureUsages</code> but for internal use.\nTextureView descriptor.\nA uniform buffer bound in a bind group.\nThe texture is in unknown state.\nFlag used by the wgpu-core texture tracker to say that the …\nStores the text of any validation errors that have …\nA vertex buffer used for drawing.\nFlag for internal testing.\nDescribes how the vertex buffer is interpreted.\nReturns the next texture to be presented by the swapchain …\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nThe stride, in bytes, between elements of this buffer.\nThe list of attributes which comprise a single vertex.\nBegin encoding a new command buffer.\nSafety:\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nGet the underlying bits value.\nGet the underlying bits value.\nGet the underlying bits value.\nGet the underlying bits value.\nGet the underlying bits value.\nGet the underlying bits value.\nGet the underlying bits value.\nGet the underlying bits value.\nGet the underlying bits value.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe buffer being bound.\nThe alignment of the start of the buffer used as a GPU …\nThe alignment of the row pitch of the texture data stored …\nTo get the required sizes for the buffer allocations use …\nThe effect of draw calls on the color aspect of the output …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …")