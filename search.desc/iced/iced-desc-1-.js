searchState.loadedDescShard("iced", 1, "Returns true if the curve can be approximated with a …\nReturns whether this segment is fully monotonic.\nReturns whether this segment is fully monotonic.\nReturns true if the curve can be safely approximated with …\nPer SVG spec, this arc should be rendered as a line_to …\nReturns whether this segment is monotonic on the x axis.\nReturns whether this segment is monotonic on the x axis.\nReturns whether this segment is monotonic on the y axis.\nReturns whether this segment is monotonic on the y axis.\nOf the four candidate arc sweeps, two will represent an …\nComputes the length of this segment.\nComputes the length of this segment.\nLinear interpolation between two angles, using the …\nComputes the intersection points (if any) between this …\nComputes the intersection points (if any) between this …\nComputes the intersections (if any) between this segment …\nComputes the intersections (if any) between this segment a …\nComputes the intersection points (if any) between this …\nComputes the intersections (if any) between this segment …\nComputes the intersections (if any) between this segment …\nReturn the x inflection point or None if this curve is …\nReturn the y inflection point or None if this curve is …\nComputes third mid-point of this segment.\nComputes the number of quadratic bézier segments required …\nShorthand for <code>Point::new(x, y)</code>.\nReturns this angle in the [0..2*PI[ range.\nComputes the intersection points (if any) between this …\nComputes the intersections (if any) between this segment a …\nSample the curve at t (expecting t between 0 and 1).\nSample the curve at t (expecting t between 0 and 1).\nSample the curve at t (expecting t between 0 and 1).\nSample the segment at t (expecting t between 0 and 1).\nSample the curve at t (expecting t between 0 and 1).\nSample the curve’s tangent at t (expecting t between 0 …\nChanges the segment’s length, moving destination point.\nReturns this angle in the ]-PI..PI] range.\nReturns (sin(self), cos(self)).\nShorthand for <code>Size::new(x, y)</code>.\nReturn the parameter values corresponding to a given x …\nReturn the parameter values corresponding to a given y …\nSplit this curve into two sub-curves.\nSplit this curve into two sub-curves.\nSplit this curve into two sub-curves.\nSplit this curve into two sub-segments.\nSplit this curve into two sub-curves.\nReturn the curve inside a given range of t.\nReturn the sub-curve inside a given range of t.\nReturn the sub-curve inside a given range of t.\nReturn the sub-segment inside a given range of t.\nReturn the sub-curve inside a given range of t.\nComputes the squared distance between this segment and a …\nReturned the squared distance to a point.\nReturns the shortest squared distance between this segment …\nComputes the squared length of this segment.\nIf <code>sweep</code> is <code>true</code>, then the arc will be drawn in a “…\nEnd of the curve.\nConverts this arc from endpoints to center notation.\nElevate this curve to a third order bézier.\nCast angle to <code>f32</code>.\nCast angle <code>f64</code>.\nReturns the line containing this segment.\nApproximate the curve with a single quadratic bézier …\nEvaluates an upper bound on the maximum distance between …\nConvert to the SVG arc notation.\nReturns the vector between this segment’s <code>from</code> and <code>to</code> …\n[Not implemented] Applies the transform to this triangle …\nApplies the transform to this curve and returns the …\nApplies the transform to this segment and returns the …\nApplies the transform to this curve and returns the …\nFallible cast from one numeric representation to another.\nShorthand for <code>Vector::new(x, y)</code>.\nThe extent of the element in the <code>U</code> units along the <code>x</code> axis …\nSample x at t (expecting t between 0 and 1).\nSample the x coordinate of the curve at t (expecting t …\nSample the x coordinate of the segment at t (expecting t …\nSample the x coordinate of the curve at t (expecting t …\nThe <code>x</code> (traditionally, horizontal) coordinate.\nFind the advancement of the x-most position in the curve.\nFind the advancement of the x-most position in the curve.\nFind the x-least position in the curve.\nFind the advancement of the x-least position in the curve.\nSample y at t (expecting t between 0 and 1).\nSample the y coordinate of the curve at t (expecting t …\nSample the y coordinate of the segment at t (expecting t …\nSample the y coordinate of the curve at t (expecting t …\nThe <code>y</code> (traditionally, vertical) coordinate.\nFind the advancement of the y-most position in the curve.\nFind the advancement of the y-most position in the curve.\nFind the advancement of the y-least position in the curve.\nFind the advancement of the y-least position in the curve.\nAn elliptic arc curve segment.\nFlag parameters for arcs as described by the SVG …\nFlattening iterator for arcs.\nAn elliptic arc curve segment using the SVG’s end-point …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nOf the four candidate arc sweeps, two will represent an …\nIf <code>sweep</code> is <code>true</code>, then the arc will be drawn in a “…\nA string with a fixed capacity.\nA vector with a fixed capacity.\nError value indicating insufficient capacity\nA draining iterator for <code>ArrayVec</code>.\nBy-value iterator for <code>ArrayVec</code>.\nReturn a raw mutable pointer to the vector’s buffer.\nReturn a mutable slice containing all elements of the …\nReturn a mutable string slice of the whole <code>ArrayString</code>.\nReturn a raw pointer to the vector’s buffer.\nReturn a slice containing all elements of the vector.\nReturn a string slice of the whole <code>ArrayString</code>.\nReturn the capacity of the <code>ArrayVec</code>.\nReturn the capacity of the <code>ArrayString</code>.\nRemove all elements in the vector.\nMake the string empty.\nReturn an empty array\nReturn an empty <code>ArrayString</code>\nCreate a draining iterator that removes the specified …\nExtract the overflowing element\nExtend the <code>ArrayVec</code> with an iterator.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a new <code>ArrayString</code> from a <code>str</code>.\nReturns the argument unchanged.\nCreate a new <code>ArrayString</code> from a byte string literal.\nCreate an <code>ArrayVec</code> from an iterator.\nInsert <code>element</code> at position <code>index</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturn the inner fixed size array, if it is full to its …\nReturn the inner fixed size array.\nReturns whether the <code>ArrayVec</code> is empty.\nReturns whether the string is empty.\nReturn true if the <code>ArrayVec</code> is completely filled to its …\nReturn if the <code>ArrayString</code> is completely filled.\nReturn the number of elements in the <code>ArrayVec</code>.\nReturn the length of the string.\nCreate a new empty <code>ArrayVec</code>.\nCreate a new empty <code>ArrayString</code>.\nCreate a new <code>CapacityError</code> from <code>element</code>.\nCreate a new empty <code>ArrayVec</code> (const fn).\nCreate a new empty <code>ArrayString</code> (const fn).\nRemove the last element in the vector and return it.\nRemoves the last character from the string and returns it.\nRemove the element at <code>index</code> and shift down the following …\nPush <code>element</code> to the end of the vector.\nAdds the given char to the end of the string.\nAdds the given string slice to the end of the string.\nPush <code>element</code> to the end of the vector without checking the …\nReturns the capacity left in the <code>ArrayVec</code>.\nReturns the capacity left in the <code>ArrayString</code>.\nRemove the element at <code>index</code> and shift down the following …\nRemoves a <code>char</code> from this <code>ArrayString</code> at a byte position …\nRetains only the elements specified by the predicate.\nSet the vector’s length without dropping or moving out …\nSet the strings’s length.\nConvert into a <code>CapacityError</code> that does not carry an …\nRemove the element at <code>index</code> and swap the last element into …\nRemove the element at <code>index</code> and swap the last element into …\nReturns the ArrayVec, replacing the original with a new …\nShortens the vector, keeping the first <code>len</code> elements and …\nShortens this <code>ArrayString</code> to the specified length.\nCopy all elements from the slice and append to the <code>ArrayVec</code>…\nInsert <code>element</code> at position <code>index</code>.\nPush <code>element</code> to the end of the vector.\nAdds the given char to the end of the string.\nAdds the given string slice to the end of the string.\nCreate a new <code>ArrayString</code> value fully filled with ASCII …\nA 2d curve segment defined by four points: the beginning …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nAn angle in radians\nA 2d vector of booleans, useful for component-wise logic …\nA 3d vector of booleans, useful for component-wise logic …\nA 2d axis aligned rectangle represented by its minimum and …\nAn axis aligned 3D box represented by its minimum and …\nHomogeneous vector in 3D space.\nA one-dimensional distance, with value represented by <code>T</code> …\nA 2d Point tagged with a unit.\nA 3d Point tagged with a unit.\nA 2d Rectangle optionally tagged with a unit.\nA rigid transformation. All lengths are preserved under …\nA transform that can represent rotations in 2d, …\nA transform that can represent rotations in 3d, …\nA scaling factor between two different units of …\nA group of 2D side offsets, which correspond to …\nA 2d size tagged with a unit.\nA 3d size tagged with a unit.\nA 2d transform represented by a column-major 3 by 3 …\nA 3d transform stored as a column-major 4 by 4 matrix.\nA 2d transformation from a space to another that can only …\nA 3d transformation from a space to another that can only …\nTrait for basic trigonometry functions, so they can be …\nThe default unit.\nA 2d Vector tagged with a unit.\nA 3d Vector tagged with a unit.\nComputes the absolute value of each component.\nComputes the absolute value of each component.\nComputes the vector with absolute values of each component.\nComputes the vector with absolute values of each component.\nReturns <code>true</code> if all components are <code>true</code> and <code>false</code> …\nReturns <code>true</code> if all components are <code>true</code> and <code>false</code> …\nReturns new vector with by-component AND operation applied.\nReturns new vector with by-component AND operation applied.\nAngle in radians\nReturns the signed angle between this vector and the x …\nReturns the signed angle between this vector and another …\nReturns the positive angle between this vector and another …\nReturns <code>true</code> if any component are <code>true</code> and <code>false</code> otherwise.\nReturns <code>true</code> if any component are <code>true</code> and <code>false</code> otherwise.\nReturns true is this transform is approximately equal to …\nReturns true is this transform is approximately equal to …\nReturns true is this transform is approximately equal to …\nReturns true is this transform is approximately equal to …\nReturns true is this transform is approximately equal to …\nUtilities for testing approximate ordering - especially …\nReturns result of multiplication of both components\nCreates a rotation around a given axis.\nCreates a rotation around the x axis.\nCreates a rotation around the y axis.\nCreates a rotation around the z axis.\nShorthand for …\nShorthand for <code>BoolVector2D { x, y }</code>.\nShorthand for <code>BoolVector3D { x, y, z }</code>.\nCast from one numeric representation to another, …\nCast from one numeric representation to another, …\nCast from one numeric representation to another, …\nCast from one numeric representation to another, …\nCast from one numeric representation to another, …\nCast from one numeric representation to another, …\nCast from one numeric representation to another, …\nCast from one numeric representation to another, …\nCast from one numeric representation to another, …\nCast from one numeric representation to another, …\nCast from one numeric representation to another, …\nCast from one numeric representation to another, …\nCast from one numeric representation to another, …\nCast from one numeric representation to another, …\nCast from one numeric representation to another, …\nCast the unit\nCast the unit\nCast the unit\nCast the unit, preserving the numeric value.\nCast the unit, preserving the numeric value.\nCast the unit\nCast the unit, preserving the numeric value.\nCast the unit, preserving the numeric value.\nCast the unit\nCast the unit\nCast the unit.\nCast the unit.\nRounds each component to the smallest integer equal or …\nSee Point2D::ceil()\nSee Point3D::ceil()\nRounds each component to the smallest integer equal or …\nRounds each component to the smallest integer equal or …\nSee <code>Size2D::ceil()</code>.\nSee <code>Size3D::ceil()</code>.\nRounds each component to the smallest integer equal or …\nRounds each component to the smallest integer equal or …\nSee <code>Vector2D::ceil()</code>\nRounds each component to the smallest integer equal or …\nSee <code>Vector3D::ceil()</code>\nReturns the point each component of which clamped by …\nReturns the point each component of which clamped by …\nReturns the point each component of which clamped by …\nReturns the size each component of which clamped by …\nReturns the size each component of which clamped by …\nReturns the vector each component of which is clamped by …\nReturns the vector each component of which is clamped by …\nReturn this vector with minimum and maximum lengths …\nReturn this vector with minimum and maximum lengths …\nReturns the component-wise division of the two vectors.\nReturns the component-wise division of the two vectors.\nReturns the component-wise multiplication of the two …\nReturns the component-wise multiplication of the two …\nReturns <code>true</code> if this box2d contains the point <code>p</code>. A point …\nReturns <code>true</code> if this box3d contains the point <code>p</code>. A point …\nReturns true if this rectangle contains the point. Points …\nReturns <code>true</code> if this box contains the interior of the …\nReturns <code>true</code> if this box3d contains the interior of the …\nReturns <code>true</code> if this box contains the point <code>p</code>. A point is …\nReturns <code>true</code> if this box3d contains the point <code>p</code>. A point …\nReturns true if this rectangle contains the interior of …\nReturns the norm of the cross product [self.x, self.y, 0] …\nCross product.\nDecompose this into a translation and an rotation to be …\nA set of aliases for all types, tagged with the default …\nReturns the identity transform.\nReturns the identity transform.\nThe extent of the element in the <code>U</code> units along the <code>z</code> axis.\nComputes and returns the determinant of this transform.\nCompute the determinant of the transform.\nCalculates Euclidean division, the matching method for …\nCalculates Euclidean division, the matching method for …\nDot product.\nDot product.\nReturns vector with results of “equal” operation on …\nReturns vector with results of “equal” operation on …\nReturns vector with results of “equal” operation on …\nReturns vector with results of “equal” operation on …\nCreates a rotation from Euler angles.\nCreate a 3d point from this one, using the specified z …\nCreate a 3d vector from this one, using the specified z …\nRounds each component to the biggest integer equal or …\nSee Point2D::floor()\nRounds each component to the biggest integer equal or …\nSee Point3D::floor()\nRounds each component to the biggest integer equal or …\nSee <code>Size2D::floor()</code>.\nRounds each component to the biggest integer equal or …\nSee <code>Size3D::floor()</code>.\nRounds each component to the biggest integer equal or …\nSee <code>Vector2D::floor()</code>\nRounds each component to the biggest integer equal or …\nSee <code>Vector3D::floor()</code>\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConstructor taking angle and length\nCreate a transform providing its components via an array …\nCreate a transform providing its components via an array …\nEquivalent to <code>from_array</code> with elements packed two at a time\nEquivalent to <code>from_array</code> with elements packed four at a …\nConstructor setting the same value to all sides, taking a …\nConstructor taking properly Lengths instead of scalar …\nConstructor taking properly Lengths instead of scalar …\nConstructor taking a typed Length for each side.\nConstructor taking scalar strongly typed lengths.\nConstructor taking scalar strongly typed lengths.\nConstructor taking properly  Lengths instead of scalar …\nConstructor taking properly  Lengths instead of scalar …\nConstructor.\nConstructor.\nReturns the smallest box containing all of the provided …\nReturns the smallest box containing all of the provided …\nReturns the smallest rectangle defined by the …\nConvenience function to create a scale transform from a …\nCreates a Box2D of the given size, at offset zero.\nCreates a Box3D of the given size, at offset zero.\nCreates a rect of the given size, at offset zero.\nTag a unitless value with units.\nTag a unitless value with units.\nTag a unitless value with units.\nTag a unitless value with units.\nTag a unitless value with units.\nTag a unitless value with units.\nTag a unitless value with units.\nTag a unitless value with units.\nTag a unitless value with units.\nTag a unitless value with units.\nTag a unitless value with units.\nTag a unitless value with units.\nTag a unit-less value with units.\nTag a unitless value with units.\nTag a unitless value with units.\nTag a unitless value with units.\nConstruct side offsets from min and a max vector offsets.\nConstruct side offsets from min and a max vector offsets.\nUnpack the underlying value from the wrapper.\nReturns the underlying scalar scale factor.\nReturns self.angle as a strongly typed <code>Angle&lt;T&gt;</code>.\nReturns vector with results of “greater then” …\nReturns vector with results of “greater than” …\nReturns vector with results of “greater than” …\nReturns vector with results of “greater than” …\nThe extent of the element in the <code>U</code> units along the <code>y</code> axis …\nThe extent of the element in the <code>U</code> units along the <code>y</code> axis.\nComponent multiplied by the imaginary number <code>i</code>.\nConstruct an identity transform\nCreates the identity rotation.\nCreates the identity rotation.\nCreates an identity scale (1.0).\nCreates no-op translation (both <code>x</code> and <code>y</code> is <code>zero()</code>).\nCreates no-op translation (<code>x</code>, <code>y</code> and <code>z</code> is <code>zero()</code>).\nCreate an identity matrix:\nCreates an identity matrix:\nInflates the box by the specified sizes on each side …\nInflates the box by the specified sizes on each side …\nCalculate the size and position of an inner box.\nCalculate the size and position of an inner rectangle.\nComputes the intersection of two boxes, returning <code>None</code> if …\nComputes the intersection of two boxes without check …\nReturns <code>true</code> if the two boxes intersect.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nInverts the transformation\nReturns the inverse of this rotation.\nReturns the inverse of this rotation.\nThe inverse Scale (1.0 / self).\nReturn the inverse transformation.\nReturn the inverse transformation.\nReturns the inverse transform if possible.\nReturns the inverse transform if possible.\nReturns <code>true</code> if this transform can be represented with a …\nCheck whether shapes on the XY plane with Z pointing …\nReturns true if the size is zero, negative or NaN.\nReturns true if the size is zero, negative or NaN.\nReturns <code>true</code> if any component of size is zero, negative, …\nReturns <code>true</code> if any component of size is zero, negative or …\nReturns true if all members are finite.\nReturns true if all members are finite.\nReturns true if all members are finite.\nReturns true if all members are finite.\nReturns true if all members are finite.\nReturns true if all members are finite.\nReturns true if all members are finite.\nReturns true if all members are finite.\nReturns true if all members are finite.\nReturns <code>true</code> if this scale has no effect.\nCheck if translation does nothing (both x and y is <code>zero()</code>).\nCheck if translation does nothing (<code>x</code>, <code>y</code> and <code>z</code> is <code>zero()</code>).\nReturns whether it is possible to compute the inverse …\nReturns whether it is possible to compute the inverse …\nReturns true if the box has a negative area.\nReturns true if the box has a negative volume.\nReturns <code>true</code> if norm of this quaternion is (approximately) …\nReturns <code>true</code> if both components is positive and <code>false</code> any …\nReturns <code>true</code> if all components is positive and <code>false</code> any …\nReturns <code>true</code> if all side offsets are zero.\nComponent multiplied by the imaginary number <code>j</code>.\nComponent multiplied by the imaginary number <code>k</code>.\nReturns the vector length.\nReturns the vector length.\nLinearly interpolate between this box and another box.\nLinearly interpolate between this box3d and another box3d.\nLinearly interpolate between this length and another …\nLinearly interpolate between this point and another point.\nLinearly interpolate between this point and another point.\nLinearly interpolate between this rectangle and another …\nBasic Linear interpolation between this rotation and …\nLinearly interpolate each component between this size and …\nLinearly interpolate between this size and another size.\nLinearly interpolate each component between this vector …\nLinearly interpolate each component between this vector …\nReturns vector with results of “lower then” operation …\nReturns vector with results of “lower than” operation …\nReturns vector with results of “lower than” operation …\nReturns vector with results of “lower than” operation …\nApply the function <code>f</code> to each component of this point.\nApply the function <code>f</code> to each component of this point.\nApply the function <code>f</code> to each component of this vector.\nApply the function <code>f</code> to each component of this vector.\nReturns maximum between this length and another length.\nReturns the size each component of which are maximum of …\nReturns the size each component of which are maximum of …\nReturns the vector each component of which are maximum of …\nReturns the vector each component of which are maximum of …\nReturns minimum between this length and another length.\nReturns the size each component of which are minimum of …\nReturns the size each component of which are minimum of …\nReturns the vector each component of which are minimum of …\nReturns the vector each component of which are minimum of …\nMultiplies all of the transform’s component by a scalar …\nConstructor.\nConstructor.\nConstructor taking scalar values directly.\nAssociate a value with a unit of measure.\nConstructor taking scalar values directly.\nConstructor taking scalar values directly.\nConstructor.\nConstruct a new rigid transformation, where the <code>rotation</code> …\nCreates a rotation from an angle in radians.\nConstructor taking a scalar for each side.\nConstructor taking scalar values.\nConstructor taking scalar values.\nConstructor taking scalar values directly.\nConstructor taking scalar values directly.\nCreate a transform specifying its components in using the …\nCreate a transform specifying all of it’s component as a …\nCreate a transform representing a 2d transformation from …\nConstructor setting the same value to all sides, taking a …\nConstruct a new rigid transformation, where the <code>translation</code>…\nReturns <code>true</code> if all components are <code>false</code> and <code>false</code> …\nReturns <code>true</code> if all components are <code>false</code> and <code>false</code> …\nComputes the norm of this quaternion.\nReturns a unit quaternion from this one.\nReturns the vector with length of one unit.\nReturns the vector with length of one unit\nReturns new vector with results of negation operation on …\nReturns new vector with results of negation operation on …\nReturns vector with results of “not equal” operation …\nReturns vector with results of “not equal” operation …\nReturns vector with results of “not equal” operation …\nReturns vector with results of “not equal” operation …\nA one-dimensional length, tagged with its units.\nConstructor, setting all components to one.\nConstructor, setting all components to one.\nReturns new vector with by-component OR operation applied.\nReturns new vector with by-component OR operation applied.\nConstructor, setting all components to zero.\nConstructor, setting all components to zero.\nCreate an orthogonal projection transform.\nCalculate the b and position of an outer box.\nCalculate the size and position of an outer rectangle.\nReturns a box that encompasses the result of transforming …\nReturns a 2d box that encompasses the result of …\nReturns a 3d box that encompasses the result of …\nReturns a rectangle that encompasses the result of …\nReturns a rectangle that encompasses the result of …\nCreate a simple perspective transform, projecting to the …\nShorthand for <code>Point2D::new(x, y)</code>.\nShorthand for <code>Point3D::new(x, y)</code>.\nApplies a rotation before self’s transformation and …\nReturns a transform with a rotation applied before self’…\nApplies a scale before self’s transformation and returns …\nReturns a transform with a scale applied before self’s …\nApplies a translation before self’s transformation and …\nReturns a transform with a translation applied before self…\nReturns this vector projected onto another one.\nReturns this vector projected onto another one.\nReturns a projection of this transform in 2d space.\nCreates a rotation around from a quaternion representation.\nThe real part.\nCreates a rotation from an angle in radians.\nShorthand for …\nReturns a reflection vector using an incident ray and a …\nReturns a reflection vector using an incident ray and a …\nCalculates the least nonnegative remainder of …\nCalculates the least nonnegative remainder of …\nReturn the normalized vector even if the length is larger …\nReturn the normalized vector even if the length is larger …\nReturns a rotation transform.\nCreate a 3d rotation transform from an angle / axis. The …\nReturn a box with edges rounded to integer coordinates, …\nReturn a box3d with edges rounded to integer coordinates, …\nSee Point2D::round()\nRounds each component to the nearest integer value.\nRounds each component to the nearest integer value.\nSee Point3D::round()\nReturn a rectangle with edges rounded to integer …\nRounds each component to the nearest integer value.\nSee <code>Size2D::round()</code>.\nSee <code>Size3D::round()</code>.\nRounds each component to the nearest integer value.\nSee <code>Vector2D::round()</code>\nRounds each component to the nearest integer value.\nSee <code>Vector3D::round()</code>\nRounds each component to the nearest integer value.\nReturn a box with faces/edges rounded to integer …\nReturn a box3d with faces/edges rounded to integer …\nReturn a rectangle with edges rounded to integer …\nReturn a box with faces/edges rounded to integer …\nReturn a box3d with faces/edges rounded to integer …\nReturn a rectangle with edges rounded to integer …\nCreate a 2d scale transform:\nCreate a 3d scale transform:\nReturns point, each component of which or from <code>a</code>, or from <code>b</code>…\nReturns point, each component of which or from <code>a</code>, or from <code>b</code>…\nReturns size, each component of which or from <code>a</code>, or from <code>b</code> …\nReturns size, each component of which or from <code>a</code>, or from <code>b</code> …\nReturns vector, each component of which or from <code>a</code>, or from …\nReturns vector, each component of which or from <code>a</code>, or from …\nChange the size of the box by adjusting the max endpoint …\nShorthand for <code>Size2D::new(w, h)</code>.\nShorthand for <code>Size3D::new(w, h, d)</code>.\nCreate a 2d skew transform.\nSpherical linear interpolation between this rotation and …\nConstructor setting all components to the same value.\nConstructor setting all components to the same value.\nConstructor setting all components to the same value.\nConstructor setting all components to the same value.\nConstructor setting all components to the same value.\nConstructor setting all components to the same value.\nReturns the vector’s length squared.\nReturns the vector’s length squared.\nComputes the squared norm of this quaternion.\nReturns the multiplication of the two transforms such that …\nReturns a rotation representing the other rotation …\nReturns a rotation representing this rotation followed by …\nReturns the multiplication of the two matrices such that …\nReturns the multiplication of the two matrices such that …\nApplies a rotation after self’s transformation and …\nReturns a transform with a rotation applied after self’s …\nApplies a scale after self’s transformation and returns …\nReturns a transform with a scale applied after self’s …\nApplies a translation after self’s transformation and …\nReturns a transform with a translation applied after self…\nConvert into a 2d point.\nConvert into a 2d vector.\nCreate a 2D transform picking the relevant terms from this …\nConvert into a 3d point with z-coordinate equals to zero.\nCreates a 3d rotation (around the z axis) from this 2d …\nConvert into a 3d vector with <code>z</code> coordinate equals to …\nCreate a 3D transform from the current transform\nCast into an array with x and y.\nCast into an array with x, y and z.\nReturn this size as an array of two elements (width, then …\nReturn this size as an array of three elements (width, …\nCast into an array with x and y.\nCast into an array with x, y and z.\nCast into an array with x and y.\nCast into an array with x, y and z.\nReturns an array containing this transform’s terms.\nReturns an array containing this transform’s terms.\nCast into an array with x, y, z and 0.\nReturns an array containing this transform’s terms …\nReturns an array containing this transform’s terms …\nEquivalent to <code>to_array</code> with elements packed two at a time …\nEquivalent to <code>to_array</code> with elements packed four at a time …\nEquivalent to <code>to_array_transposed</code> with elements packed …\nCast into an <code>f32</code> box.\nCast into an <code>f32</code> box3d.\nCast into an <code>f32</code> point.\nCast into an <code>f32</code> point.\nCast into an <code>f32</code> rectangle.\nCast into an <code>f32</code> size.\nCast into an <code>f32</code> size.\nCast into an <code>f32</code> vector.\nCast into an <code>f32</code> vector.\nCast into an <code>f32</code> vector.\nCast into an <code>f32</code> vector.\nCast into an <code>f64</code> box.\nCast into an <code>f64</code> box3d.\nCast into an <code>f64</code> point.\nCast into an <code>f64</code> point.\nCast into an <code>f64</code> rectangle.\nCast into an <code>f64</code> size.\nCast into an <code>f64</code> size.\nCast into an <code>f64</code> vector.\nCast into an <code>f64</code> vector.\nCast into an <code>f64</code> vector.\nCast into an <code>f64</code> vector.\nCast into an <code>i32</code> box, truncating decimals if any.\nCast into an <code>i32</code> box3d, truncating decimals if any.\nCast into an i32 point, truncating decimals if any.\nCast into an <code>i32</code> point, truncating decimals if any.\nCast into an <code>i32</code> rectangle, truncating decimals if any.\nCast into an <code>i32</code> size, truncating decimals if any.\nCast into an <code>i32</code> size, truncating decimals if any.\nCast into an i32 vector, truncating decimals if any.\nCast into an i32 vector, truncating decimals if any.\nCast into an i32 vector, truncating decimals if any.\nCast into an <code>i32</code> vector, truncating decimals if any.\nCast into an <code>i64</code> box, truncating decimals if any.\nCast into an <code>i64</code> box3d, truncating decimals if any.\nCast into an i64 point, truncating decimals if any.\nCast into an <code>i64</code> point, truncating decimals if any.\nCast into an <code>i64</code> rectangle, truncating decimals if any.\nCast into an <code>i64</code> size, truncating decimals if any.\nCast into an <code>i64</code> size, truncating decimals if any.\nCast into an i64 vector, truncating decimals if any.\nCast into an i64 vector, truncating decimals if any.\nCast into an i64 vector, truncating decimals if any.\nCast into an <code>i64</code> vector, truncating decimals if any.\nCast this vector into a point.\nCast this vector into a point.\nConvert into Cartesian 2D point.\nConvert into Cartesian 3D point.\nCast this vector into a size.\nReturns the matrix representation of this rotation.\nReturns the matrix representation of this rotation.\nReturns the matrix representation of this translation.\nReturns the matrix representation of this translation.\nCreates translation by this vector in vector units.\nCreates translation by this vector in vector units\nCast into a tuple with x and y.\nCast into a tuple with x, y and z.\nReturn this size as a tuple of two elements (width, then …\nReturn this size as an array of three elements (width, …\nCast into a tuple with x and y.\nCast into a tuple with x, y and z.\nCast into a tuple with x and y.\nCast into a tuple with x, y and z.\nCast into a tuple with x, y, z and 0.\nCast into an <code>u32</code> box, truncating decimals if any.\nCast into an <code>u32</code> box3d, truncating decimals if any.\nCast into an <code>u32</code> point, truncating decimals if any.\nCast into an <code>u32</code> point, truncating decimals if any.\nCast into an <code>u32</code> rectangle, truncating decimals if any.\nCast into an <code>u32</code> size, truncating decimals if any.\nCast into an <code>u32</code> size, truncating decimals if any.\nCast into an <code>u32</code> vector, truncating decimals if any.\nCast into an <code>u32</code> vector, truncating decimals if any.\nCast into an <code>u32</code> vector, truncating decimals if any.\nCast into an <code>u32</code> vector, truncating decimals if any.\nCast into an <code>u64</code> rectangle, truncating decimals if any.\nCast into an <code>u64</code> size, truncating decimals if any.\nDrop the units, preserving only the numeric value.\nDrop the units, preserving only the numeric value.\nDrop the units, preserving only the numeric value.\nDrop the units, preserving only the numeric value.\nDrop the units, preserving only the numeric value.\nDrop the units, preserving only the numeric value.\nDrop the units, preserving only the numeric value.\nDrop the units, preserving only the numeric value.\nDrop the units, preserving only the numeric value.\nDrop the units, preserving only the numeric value.\nDrop the units, preserving only the numeric value.\nDrop the units, preserving only the numeric value.\nDrop the units, preserving only the numeric value.\nDrop the units, preserving only the numeric value.\nDrop the units, preserving only the numeric value.\nDrop the units, preserving only the numeric value.\nCast into an <code>usize</code> box, truncating decimals if any.\nCast into an <code>usize</code> box3d, truncating decimals if any.\nCast into an <code>usize</code> point, truncating decimals if any.\nCast into an <code>usize</code> point, truncating decimals if any.\nCast into an <code>usize</code> rectangle, truncating decimals if any.\nCast into an <code>uint</code> size, truncating decimals if any.\nCast into an <code>uint</code> size, truncating decimals if any.\nCast into an <code>usize</code> vector, truncating decimals if any.\nCast into an <code>usize</code> vector, truncating decimals if any.\nCast into an <code>usize</code> vector, truncating decimals if any.\nCast into an <code>usize</code> vector, truncating decimals if any.\nCast this point into a vector.\nCast this point into a vector.\nReturn this size as a vector with width and height.\nReturn this size as a vector with width, height and depth.\nCast into a 2D vector.\nCast into a 3D vector.\nTranslate a 2D box and cast its unit.\nReturns the given box transformed by this scale.\nTranslate a 2D box and cast its unit.\nReturns the given box transformed by this scale.\nTranslate a 3D box and cast its unit.\nReturns the given 2d point transformed by this rotation.\nReturns the given point transformed by this scale.\nTranslate a point and cast its unit.\nReturns the given point transformed by this transform.\nReturns the given 2d point transformed by this rotation …\nTranslate a point and cast its unit.\nReturns the given 2d point transformed by this transform, …\nReturns the homogeneous vector corresponding to the …\nReturns the given 3d point transformed by this rotation.\nReturns the given point transformed by this scale.\nTranslate a point and cast its unit.\nReturns the given 3d point transformed by this transform, …\nReturns the homogeneous vector corresponding to the …\nReturns the given rect transformed by this scale.\nTranslate a rectangle and cast its unit.\nTranslate a rectangle and cast its unit.\nReturns the given size transformed by this scale.\nNo-op, just cast the unit.\nNo-op, just cast the unit.\nReturns the given 2d vector transformed by this rotation.\nReturns the given vector transformed by this scale.\nReturns the given vector transformed by this matrix.\nReturns the given 2d vector transformed by this rotation …\nReturns the given 2d vector transformed by this matrix.\nReturns the given 3d vector transformed by this rotation.\nReturns the given 3d vector transformed by this matrix.\nReturns the same box, translated by a vector.\nReturns the same box3d, translated by a vector.\nReturns the same rectangle, translated by a vector.\nCreate a 2d translation transform:\nCreate a 3d translation transform:\nFallible cast from one numeric representation to another, …\nFallible cast from one numeric representation to another, …\nFallible cast from one numeric representation to another, …\nFallible cast from one numeric representation to another, …\nFallible cast from one numeric representation to another, …\nFallible cast from one numeric representation to another, …\nFallible cast from one numeric representation to another, …\nFallible cast from one numeric representation to another, …\nFallible cast from one numeric representation to another, …\nFallible cast from one numeric representation to another, …\nFallible cast from one numeric representation to another, …\nFallible cast from one numeric representation to another, …\nFallible cast from one numeric representation to another, …\nFallible cast from one numeric representation to another, …\nFallible cast from one numeric representation to another, …\nReturns the vector with length of one unit.\nReturns the vector with length of one unit.\nComputes the union of two boxes.\nComputes the union of two boxes.\nCreates a rotation around from a quaternion representation …\nConvenience constructor.\nConvenience constructor.\nReturns the vector part (i, j, k) of this quaternion.\nReturns result of multiplication of all components\nThe extent of the element in the <code>U</code> units along the <code>x</code> axis …\nThe extent of the element in the <code>U</code> units along the <code>x</code> axis.\nReturns the same transform with a different destination …\nReturns the same transform with a different destination …\nReturn this vector scaled to fit the provided length.\nReturn this vector capped to a maximum length.\nReturn this vector capped to a maximum length.\nReturn this vector with a minimum length applied.\nReturn this vector with a minimum length applied.\nReturns the same transform with a different source unit.\nReturns the same transform with a different source unit.\nThe <code>x</code> (traditionally, horizontal) coordinate.\nThe <code>x</code> (traditionally, horizontal) coordinate.\nReturns a 2d point using this point’s x and y coordinates\nReturns a 2d vector using this vector’s x and y …\nReturns a 2d vector using this vector’s x and y …\nReturns a 2d point using this point’s x and z coordinates\nReturns a 2d vector using this vector’s x and z …\nReturns a 2d vector using this vector’s x and z …\nThe <code>y</code> (traditionally, vertical) coordinate.\nThe <code>y</code> (traditionally, vertical) coordinate.\nSwap x and y.\nSwap x and y.\nReturns a 2d point using this point’s x and z coordinates\nReturns a 2d vector using this vector’s x and z …\nReturns a 2d vector using this vector’s y and z …\nThe <code>z</code> (traditionally, depth) coordinate.\nConstructor, setting all sides to zero.\nConstructor, setting all sides to zero.\nThe same as <code>origin()</code>.\nThe same as <code>origin()</code>.\nConstructor, setting all sides to zero.\nConstructor, setting all sides to zero.\nThe same as <code>Zero::zero()</code> but available without importing …\nThe same as <code>Zero::zero()</code> but available without importing …\nConstructor, setting all components to zero.\nConstructor, setting all components to zero.\nConstructor, setting all components to zero.\nConstructor, setting all components to zero.\nApply the function <code>f</code> to each pair of components of this …\nApply the function <code>f</code> to each pair of components of this …\nApply the function <code>f</code> to each pair of components of this …\nApply the function <code>f</code> to each pair of components of this …\nTrait for testing approximate equality\nDefault epsilon value\nReturns <code>true</code> is this object is approximately equal to the …\nReturns <code>true</code> is this object is approximately equal to the …\nAngle in radians\nThe extent of the element in the <code>U</code> units along the <code>z</code> axis.\nThe extent of the element in the <code>U</code> units along the <code>y</code> axis …\nThe extent of the element in the <code>U</code> units along the <code>y</code> axis.\nComponent multiplied by the imaginary number <code>i</code>.\nComponent multiplied by the imaginary number <code>j</code>.\nComponent multiplied by the imaginary number <code>k</code>.\nThe real part.\nThe extent of the element in the <code>U</code> units along the <code>x</code> axis …\nThe extent of the element in the <code>U</code> units along the <code>x</code> axis.\nThe <code>x</code> (traditionally, horizontal) coordinate.\nThe <code>x</code> (traditionally, horizontal) coordinate.\nThe <code>y</code> (traditionally, vertical) coordinate.\nThe <code>y</code> (traditionally, vertical) coordinate.\nThe <code>z</code> (traditionally, depth) coordinate.\nDefines the smallest integer equal or greater than the …\nDefines the biggest integer equal or lower than the …\nDefines the nearest integer value to the original value.\nRounds to the smallest integer equal or greater than the …\nRounds to the biggest integer equal or lower than the …\nRounds to the nearest integer value.\nA flattening iterator for quadratic bézier segments.\nA flattening iterator for quadratic bézier segments.\nA 2d curve segment defined by three points: the beginning …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCommon APIs to segment types.\nReturn the curve after the split point.\nCompute the length of the segment using a flattened …\nReturn the curve before the split point.\nSample the derivative at t (expecting t between 0 and 1).\nSample x derivative at t (expecting t between 0 and 1).\nSample y derivative at t (expecting t between 0 and 1).\nSwap the direction of the segment.\nApproximates the curve with sequence of line segments.\nStart of the curve.\nSample the curve at t (expecting t between 0 and 1).\nSplit this curve into two sub-curves.\nReturn the curve inside a given range of t.\nEnd of the curve.\nSample x at t (expecting t between 0 and 1).\nSample y at t (expecting t between 0 and 1).\nAngle between vectors v1 and v2 (oriented clockwise …\nAn iterator that consumes <code>Event</code> iterator and yields …\nAn iterator that consumes an iterator of <code>Point</code>s and …\nAn extension trait for <code>PathEvent</code> iterators.\nApplies a 2D transform to a path iterator and yields the …\nReturns an iterator that turns curves into line segments.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate the iterator.\nCreates a new transformed path iterator from a path …\nReturns an iterator applying a 2D transform to all of its …\nAn angle in radians (f32).\nAlias for <code>euclid::default::Box2D&lt;f32&gt;</code>\nAlias for <code>euclid::default::Point2D&lt;f32&gt;</code>.\nAlias for <code>euclid::default::Rotation2D&lt;f32&gt;</code>\nAlias for <code>euclid::default::Scale&lt;f32&gt;</code>\nAlias for <code>euclid::default::Size2D&lt;f32&gt;</code>.\nAlias for <code>euclid::default::Transform2D&lt;f32&gt;</code>\nAlias for <code>euclid::default::Translation2D&lt;f32&gt;</code>\nAlias for <code>euclid::default::Point2D&lt;f32&gt;</code>.\nAngle in radians\nThe extent of the element in the <code>U</code> units along the <code>y</code> axis …\nShorthand for <code>Point::new(x, y)</code>.\nShorthand for <code>Size::new(x, y)</code>.\nShorthand for <code>Vector::new(x, y)</code>.\nThe extent of the element in the <code>U</code> units along the <code>x</code> axis …\nThe <code>x</code> (traditionally, horizontal) coordinate.\nThe <code>y</code> (traditionally, vertical) coordinate.\nThe default builder for <code>Path</code>.\nA builder for <code>Path</code> with custom attributes.\nAn iterator of endpoint and control point ids for <code>Path</code> and …\nAn iterator for <code>Path</code> and <code>PathSlice</code>.\nAn iterator for <code>Path</code> and <code>PathSlice</code>.\nA simple path data structure.\nA view on a <code>Path</code>.\nAn iterator of over a <code>Path</code> traversing the path in reverse.\nA Builder that appends a path to an existing PathBuffer.\nA Builder that appends a path to an existing PathBuffer, …\nIterator over the paths in a <code>PathBufferSlice</code>.\nAn object that stores multiple paths contiguously.\nA view on a <code>PathBuffer</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA view over a sequence of endpoint IDs forming a polygon.\nAn iterator of <code>Event&lt;EndpointId, ()&gt;</code>.\nAn iterator of <code>PathEvent</code>.\nA view over a sequence of endpoints forming a polygon.\nAn iterator of <code>IdEvent</code> for <code>Polygon</code>.\nAn iterator of <code>Event&lt;&amp;Endpoint, ()&gt;</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nBuilds a path.\nThe base path building interface.\nAn extension trait for <code>PathEvent</code> iterators.\nThe type of object that is created by this builder.\nA path building interface that tries to stay close to SVG…\nAdds a sub-path containing a circle.\nAdds a sub-path containing an ellipse.\nAdds a sub-path containing a single line segment.\nAdds a sub-path containing a single point.\nAdds a sub-path from a polygon.\nAdds a sub-path from a polygon.\nAdds a sub-path containing a rectangle.\nAdds a sub-path containing a rectangle.\nAdds an elliptical arc.\nStarts a new sub-path at a given position.\nBuilds a path object, consuming the builder.\nEnds the current sub-path by connecting it back to its …\nCloses the current sub path.\nAdds a cubic bézier curve to the current sub-path.\nAdds a cubic bézier segment to the current sub-path.\nEnds the current sub path.\nReturns a builder that approximates all curves with …\nReturns an iterator that turns curves into line segments.\nAdds an horizontal line segment.\nAdds a line segment to the current sub-path.\nAdds a line segment to the current sub-path.\nStart a new sub-path at the given position.\nApplies the provided path event.\nAdds a quadratic bézier curve to the current sub-path.\nAdds a quadratic bézier segment to the current sub-path.\nEquivalent to <code>arc_to</code> in relative coordinates.\nEquivalent to <code>cubic_bezier_to</code> in relative coordinates.\nAdds an horizontal line segment in relative coordinates.\nEquivalent to <code>line_to</code> in relative coordinates.\nEquivalent to <code>move_to</code> in relative coordinates.\nEquivalent to <code>quadratic_bezier_to</code> in relative coordinates.\nAdds a vertical line segment in relative coordinates.\nHints at the builder that a certain number of endpoints …\nHints at the builder that a certain number of endpoints …\nEquivalent to <code>cubic_bezier_to</code> with implicit first control …\nEquivalent to <code>quadratic_bezier_to</code> with implicit control …\nEquivalent to <code>smooth_cubic_bezier_to</code> in relative …\nEquivalent to <code>smooth_quadratic_bezier_to</code> in relative …\nReturns a builder that applies the given transformation to …\nReturns an iterator applying a 2D transform to all of its …\nAdds a vertical line segment.\nReturns a builder that support SVG commands.\nA bevelled corner.\nThe stroke for each sub-path does not extend beyond its …\nA <code>Gradient</code> color.\nThe shape used at the end of open subpaths when they are …\nThe dash pattern used when stroking the line.\nThe shape used at the corners of paths or basic shapes …\nA sharp corner.\nAt the end of each sub-path, the shape representing the …\nA round corner.\nA solid <code>Color</code>.\nAt the end of each sub-path, the shape representing the …\nThe style of a stroke.\nThe coloring style of some drawing.\nThe shape to be used at the end of open subpaths when they …\nThe dash pattern used when stroking the line.\nThe shape to be used at the corners of paths or basic …\nThe offset of <code>LineDash::segments</code> to start the pattern.\nThe alternating lengths of lines and gaps which describe …\nThe color or gradient of the stroke.\nThe distance between the two edges of the stroke.\nThe <code>Checkbox</code> can be interacted with.\nThe theme catalog of a <code>Checkbox</code>.\nA box that can be checked.\nThe item class of the <code>Catalog</code>.\nThe <code>Checkbox</code> cannot be interacted with.\nThe <code>Checkbox</code> can be interacted with and it is being …\nThe icon in a <code>Checkbox</code>.\nThe possible status of a <code>Checkbox</code>.\nThe style of a checkbox.\nA styling function for a <code>Checkbox</code>.\nThe <code>Background</code> of the checkbox.\nThe <code>Border</code> of hte checkbox.\nThe unicode code point that will be used as the icon.\nA danger checkbox; denoting a negaive toggle.\nThe default class produced by the <code>Catalog</code>.\nFont that will be used to display the <code>code_point</code>,\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe icon <code>Color</code> of the checkbox.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe line height of the icon.\nA primary checkbox; denoting a main toggle.\nA secondary checkbox; denoting a complementary toggle.\nThe shaping strategy of the icon.\nFont size of the content.\nThe <code>Style</code> of a class with the given status.\nA success checkbox; denoting a positive toggle.\nThe text <code>Color</code> of the checkbox.\nIndicates if the <code>Checkbox</code> is currently checked.\nIndicates if the <code>Checkbox</code> is currently checked.\nIndicates if the <code>Checkbox</code> is currently checked.\nThe theme catalog of a <code>ComboBox</code>.\nA widget for searching and selecting a single value from a …\nThe local state of a <code>ComboBox</code>.\nThe default class for the text input of the <code>ComboBox</code>.\nThe default class for the menu of the <code>ComboBox</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreates a new <code>State</code> for a <code>ComboBox</code> with the given list of …\nCreates a new <code>State</code> for a <code>ComboBox</code> with the given list of …\nThe theme catalog of a <code>Container</code>.\nThe item class of the <code>Catalog</code>.\nAn element decorating some content.\nThe identifier of a <code>Container</code>.\nThe appearance of a container.\nA styling function for a <code>Container</code>.\nThe <code>Background</code> of the container.\nThe <code>Border</code> of the container.\nA bordered <code>Container</code> with a background.\nThe default class produced by the <code>Catalog</code>.\nDraws the background of a <code>Container</code> given its <code>Style</code> and …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nComputes the layout of a <code>Container</code>.\nCreates a custom <code>Id</code>.\nA rounded <code>Container</code> with a background.\nThe <code>Shadow</code> of the container.\nThe <code>Style</code> of a class with the given status.\nThe text <code>Color</code> of the container.\nA transparent <code>Container</code>.\nCreates a unique <code>Id</code>.\nProduces a <code>Task</code> that queries the visible screen bounds of …\nUpdates the background of the <code>Style</code>.\nUpdates the border of the <code>Style</code> with the given <code>Color</code> and …\nA handle pointing to some encoded image bytes in-memory.\nImage filtering strategy.\nA handle of some image data.\nA frame that displays an image while keeping aspect ratio.\nBilinear interpolation.\nNearest neighbor.\nA file handle. The image data will be read from the file …\nA handle pointing to decoded image pixels in RGBA format.\nA frame that displays an image with the ability to zoom …\nSets the <code>ContentFit</code> of the <code>Viewer</code>.\nDraws an <code>Image</code>\nSets the <code>FilterMethod</code> of the <code>Viewer</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates an image <code>Handle</code> containing the encoded image data …\nCreates an image <code>Handle</code> pointing to the image of the given …\nCreates an image <code>Handle</code> containing the decoded image …\nSets the height of the <code>Viewer</code>.\nReturns the unique identifier of the <code>Handle</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nComputes the layout of an <code>Image</code>.\nSets the max scale applied to the image of the <code>Viewer</code>.\nSets the min scale applied to the image of the <code>Viewer</code>.\nCreates a new <code>Viewer</code> with the given <code>State</code>.\nSets the padding of the <code>Viewer</code>.\nSets the percentage the image of the <code>Viewer</code> will be scaled …\nZoom and pan on an image.\nCreates a new <code>Viewer</code> with the given image <code>Handle</code>.\nSets the width of the <code>Viewer</code>.\nThe height of the image.\nThe id of this handle.\nThe pixels.\nThe width of the image.\nThe local state of a <code>Viewer</code>.\nA frame that displays an image with the ability to zoom …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns if the cursor is currently grabbed by the <code>Viewer</code>.\nCreates a new <code>State</code>.\nReturns the bounds of the underlying image, given the …\nA container that distributes its contents vertically.\nSets the horizontal alignment of the contents of the <code>Column</code>…\nDistribute content vertically.\nExtends the <code>Column</code> with the given children.\nReturns the argument unchanged.\nCreates a <code>Column</code> from already allocated <code>Vec</code>s.\nSets the height of the <code>Column</code>.\nCalls <code>U::from(self)</code>.\nSets the maximum width of the <code>Column</code>.\nCreates an empty <code>Column</code>.\nSets the <code>Padding</code> of the <code>Column</code>.\nAdds an element to the <code>Column</code>.\nAdds an element to the <code>Column</code>, if <code>Some</code>.\nSets the vertical spacing <em>between</em> elements.\nSets the width of the <code>Column</code>.\nCreates a <code>Column</code> with the given capacity.\nCreates a <code>Column</code> with the given elements.\nA container that distributes its contents vertically.\nBuild and show dropdown menus.\nThe theme catalog of a <code>Menu</code>.\nThe item class of the <code>Catalog</code>.\nA list of selectable options.\nThe local state of a <code>Menu</code>.\nThe appearance of a <code>Menu</code>.\nA styling function for a <code>Menu</code>.\nThe <code>Background</code> of the menu.\nThe <code>Border</code> of the menu.\nThe default style of the list of a <code>Menu</code>.\nThe default class produced by the <code>Catalog</code>.\nThe default class for the scrollable of the <code>Menu</code>.\nSets the font of the <code>Menu</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new <code>Menu</code> with the given <code>State</code>, a list of options,\nCreates a new <code>State</code> for a <code>Menu</code>.\nTurns the <code>Menu</code> into an overlay <code>Element</code> at the given target …\nSets the <code>Padding</code> of the <code>Menu</code>.\nThe background <code>Color</code> of a selected option in the menu.\nThe text <code>Color</code> of a selected option in the menu.\nThe <code>Style</code> of a class with the given status.\nThe text <code>Color</code> of the menu.\nSets the text <code>text::LineHeight</code> of the <code>Menu</code>.\nSets the <code>text::Shaping</code> strategy of the <code>Menu</code>.\nSets the text size of the <code>Menu</code>.\nSets the width of the <code>Menu</code>.\nAll panes are visible\nA fixed reference line for the measurement of coordinates.\nBottom edge.\nA <code>Pane</code> was picked and then dropped outside of other <code>Pane</code> …\nThe theme catalog of a <code>PaneGrid</code>.\nCenter region.\nThe item class of this <code>Catalog</code>.\nThe arrangement of a <code>PaneGrid</code>.\nThe content of a <code>Pane</code>.\nThe visible contents of the <code>PaneGrid</code>\nA four cardinal direction.\n↓\nAn event produced during a drag and drop interaction of a …\nA pane that can be dragged.\nA <code>Pane</code> was dropped on top of another <code>Pane</code>.\nThe edges of an area.\nAn <code>Edge</code> of the full <code>PaneGrid</code>.\nEdge region.\nThe appearance of a highlight of the <code>PaneGrid</code>.\nThe horizontal axis: —\n←\nLeft edge.\nA line.\nA maximized pane is visible\nA layout node of a <code>PaneGrid</code>.\nA rectangular region in a <code>PaneGrid</code> used to display widgets.\nA <code>Pane</code>.\nThe region of this <code>Node</code> is taken by a <code>Pane</code>.\nA single <code>Pane</code> of the <code>PaneGrid</code>.\nA collection of panes distributed using either vertical or …\nA <code>Pane</code> was picked for dragging.\nThe region of a <code>Pane</code>.\nAn event produced during a resize interaction of a <code>PaneGrid</code>…\n→\nRight edge.\nA divider that splits a region in a <code>PaneGrid</code> into two …\nA split of the available space.\nThe region of this <code>Node</code> is split into two.\nThe state of a <code>PaneGrid</code>.\nThe appearance of a <code>PaneGrid</code>.\nA styling function for a <code>PaneGrid</code>.\nThe <code>Target</code> area a pane can be dropped on.\nThe title bar of a <code>Pane</code>.\nTop edge.\n↑\nThe vertical axis: |\nReturns the adjacent <code>Pane</code> of another <code>Pane</code> in the given …\nSets whether or not the <code>controls</code> attached to this <code>TitleBar</code> …\nThe <code>Background</code> of the pane region.\nThe <code>Border</code> of the pane region.\nReturns whether the <code>Draggable</code> with the given <code>Layout</code> can be …\nSets the style class of the <code>Content</code>.\nSets the style class of the <code>TitleBar</code>.\nCloses the given <code>Pane</code> and returns its internal state and …\nThe <code>Color</code> of the <code>Line</code>.\nSets the controls of the <code>TitleBar</code>.\nThe default style of a <code>PaneGrid</code>.\nThe default class produced by this <code>Catalog</code>.\nDraws the <code>Content</code> with the provided <code>Renderer</code> and <code>Layout</code>.\nDraws the <code>TitleBar</code> with the provided <code>Renderer</code> and <code>Layout</code>.\nDrops the given <code>Pane</code> into the provided <code>Target</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the internal state of the given <code>Pane</code>, if it exists.\nReturns the internal state of the given <code>Pane</code> with …\nThe appearance of a hovered region highlight.\nThe appearance of a hovered split.\nThe internal state of the <code>PaneGrid</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if the amount of panes in the <code>State</code> is 0.\nReturns whether the mouse cursor is over the pick area of …\nReturns an iterator over all the panes of the <code>State</code>, …\nReturns an iterator over the values of the <code>Contents</code>\nReturns a mutable iterator over all the panes of the <code>State</code>,\nReturns the layout of the <code>State</code>.\nReturns the layout <code>Node</code> of the <code>Contents</code>\nReturns the total amount of panes in the <code>State</code>.\nMaximize the given <code>Pane</code>. Only this pane will be rendered …\nReturns the maximized <code>Pane</code> of the <code>PaneGrid</code>.\nMove <code>Pane</code> to an <code>Edge</code> of the <code>PaneGrid</code>.\nCreates a new <code>Content</code> with the provided body.\nCreates a new <code>TitleBar</code> with the given content.\nCreates a new <code>State</code>, initializing the first pane with the …\nSets the <code>Padding</code> of the <code>TitleBar</code>.\nReturns the rectangular region for each <code>Pane</code> in the <code>Node</code> …\nThe panes of the <code>PaneGrid</code>.\nThe appearance of a picked split.\nThe new ratio of the <code>Split</code>.\nResizes two panes by setting the position of the provided …\nRestore the currently maximized <code>Pane</code> to it’s normal …\nSplits the provided <code>Rectangle</code> on the current <code>Axis</code> with the …\nSplits the given <code>Pane</code> into two in the given <code>Axis</code> and …\nThe <code>Split</code> that is being dragged for resizing.\nCalculates the bounds of the split line in a <code>Rectangle</code> …\nReturns the axis, rectangular region, and ratio for each …\nSplit a target <code>Pane</code> with a given <code>Pane</code> on a given <code>Region</code>.\nReturns an iterator over each <code>Split</code> in this <code>Node</code>.\nThe state of a <code>PaneGrid</code>.\nThe <code>Style</code> of a class with the given status.\nSets the style of the <code>Content</code>.\nSets the style of the <code>TitleBar</code>.\nSwaps the position of the provided panes in the <code>State</code>.\nSets the <code>TitleBar</code> of the <code>Content</code>.\nThe width of the <code>Line</code>.\nCreates a new <code>State</code> with the given <code>Configuration</code>.\nThe left/top <code>Configuration</code> of the split.\nThe direction of the split.\nThe right/bottom <code>Configuration</code> of the split.\nThe ratio of the split in [0.0, 1.0].\nThe picked <code>Pane</code>.\nThe picked <code>Pane</code>.\nThe picked <code>Pane</code>.\nThe <code>Target</code> where the picked <code>Pane</code> was dropped on.\nThe left/top <code>Node</code> of the split.\nThe direction of the split.\nThe right/bottom <code>Node</code> of the split.\nThe <code>Split</code> of this <code>Node</code>.\nThe ratio of the split in [0.0, 1.0].\nThe current action of a <code>PaneGrid</code>.\nA <code>Pane</code> in the <code>PaneGrid</code> is being dragged.\nThe <code>PaneGrid</code> is idle.\nThe internal state of a <code>PaneGrid</code>.\nA <code>Split</code> in the <code>PaneGrid</code> is being dragged.\nThe state of a <code>PaneGrid</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nInitializes the <code>Internal</code> state of a <code>PaneGrid</code> from a …\nThe internal state of the <code>PaneGrid</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe layout <code>Node</code> of the <code>Internal</code> state\nThe panes of the <code>PaneGrid</code>.\nReturns the current <code>Pane</code> that is being dragged, if any.\nReturns the current <code>Split</code> that is being dragged, if any.\nThe <code>Axis</code> of the <code>Split</code>.\nThe starting <code>Point</code> of the drag interaction.\nThe <code>Pane</code> being dragged.\nThe <code>Split</code> being dragged.\nThe <code>PickList</code> can be interacted with.\nDisplays an arrow icon (▼).\nThe theme catalog of a <code>PickList</code>.\nThe item class of the <code>Catalog</code>.\nA custom dynamic handle.\nThe handle to the right side of the <code>PickList</code>.\nThe <code>PickList</code> is being hovered.\nThe icon of a <code>Handle</code>.\nNo handle will be shown.\nThe <code>PickList</code> is open.\nA widget for selecting a single value from a list of …\nA custom static handle.\nThe possible status of a <code>PickList</code>.\nThe appearance of a pick list.\nA styling function for a <code>PickList</code>.\nThe <code>Background</code> of the pick list.\nThe <code>Border</code> of the pick list.\nThe unicode code point that will be used as the icon.\nThe default style of the field of a <code>PickList</code>.\nThe default class produced by the <code>Catalog</code>.\nThe default class for the menu of the <code>PickList</code>.\nFont that will be used to display the <code>code_point</code>,\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe handle <code>Color</code> of the pick list.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLine height of the content.\nThe placeholder <code>Color</code> of the pick list.\nThe shaping strategy of the icon.\nFont size of the content.\nThe <code>Style</code> of a class with the given status.\nThe text <code>Color</code> of the pick list.\nThe <code>Icon</code> used when <code>PickList</code> is closed.\nThe <code>Icon</code> used when <code>PickList</code> is open.\nFont size of the content.\nThe theme catalog of a <code>ProgressBar</code>.\nThe item class of the <code>Catalog</code>.\nA bar that displays progress.\nThe appearance of a progress bar.\nA styling function for a <code>ProgressBar</code>.\nThe <code>Background</code> of the progress bar.\nThe <code>Background</code> of the bar of the progress bar.\nThe <code>Border</code> of the progress bar.\nThe danger style of a <code>ProgressBar</code>.\nThe default class produced by the <code>Catalog</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe primary style of a <code>ProgressBar</code>.\nThe secondary style of a <code>ProgressBar</code>.\nThe <code>Style</code> of a class with the given status.\nThe success style of a <code>ProgressBar</code>.\nThe theme catalog of a <code>QRCode</code>.\nThe item class of the <code>Catalog</code>.\nThe data of a <code>QRCode</code>.\nThe data is too long to encode in a QR code for the chosen …\nAn error that occurred when building a <code>Data</code> for a <code>QRCode</code>.\nThe error correction level.\nHigh error correction. 30% of the data can be restored.\nA character that does not belong to the character set was …\nThe chosen ECI designator is invalid. A valid designator …\nThe chosen <code>Version</code> and <code>ErrorCorrection</code> combination is …\nLow error correction. 7% of the data can be restored.\nMedium error correction. 15% of the data can be restored.\nA micro QR code version. It should be between 1 and 4.\nA normal QR code version. It should be between 1 and 40.\nA type of matrix barcode consisting of squares arranged in …\nQuartile error correction. 25% of the data can be restored.\nThe appearance of a QR code.\nA styling function for a <code>QRCode</code>.\nOne or more characters in the provided data are not …\nThe size of a <code>QRCode</code>.\nThe color of the QR code background\nThe color of the QR code data cells\nThe default style of a <code>QRCode</code>.\nThe default class produced by the <code>Catalog</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new <code>Data</code> with the provided data.\nThe <code>Style</code> of a class with the given status.\nCreates a new <code>Data</code> with the provided <code>ErrorCorrection</code>.\nCreates a new <code>Data</code> with the provided <code>Version</code> and …\nThe <code>Radio</code> button can be interacted with.\nThe theme catalog of a <code>Radio</code>.\nThe item class of the <code>Catalog</code>.\nThe <code>Radio</code> button is being hovered.\nA circular button representing a choice.\nThe possible status of a <code>Radio</code> button.\nThe appearance of a radio button.\nA styling function for a <code>Radio</code>.\nThe <code>Background</code> of the radio button.\nThe border <code>Color</code> of the radio button.\nThe border width of the radio button.\nThe default style of a <code>Radio</code> button.\nThe default class produced by the <code>Catalog</code>.\nThe <code>Color</code> of the dot of the radio button.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe <code>Style</code> of a class with the given status.\nThe text <code>Color</code> of the radio button.\nIndicates whether the <code>Radio</code> button is currently selected.\nIndicates whether the <code>Radio</code> button is currently selected.\nDifferent offset on each end of the rule, length units. …\nThe theme catalog of a <code>Rule</code>.\nThe item class of the <code>Catalog</code>.\nThe fill mode of a rule.\nFill the whole length of the container.\nUniform offset from each end, length units.\nFill a percent of the length of the container. The rule …\nDisplay a horizontal or vertical rule for dividing content.\nThe appearance of a rule.\nA styling function for a <code>Rule</code>.\nThe color of the rule.\nThe default styling of a <code>Rule</code>.\nThe default class produced by the <code>Catalog</code>.\nReturn the starting offset and length of the rule.\nThe <code>FillMode</code> of the rule.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe radius of the line corners.\nThe <code>Style</code> of a class with the given status.\nThe width (thickness) of the rule line.\nThe amount of absolute offset in each direction of a …\nThe <code>Scrollable</code> can be interacted with.\nAlignment of the scrollable’s content relative to it’s …\nBoth vertical and horizontal scrolling\nThe theme catalog of a <code>Scrollable</code>.\nThe item class of the <code>Catalog</code>.\nThe direction of <code>Scrollable</code>.\nThe <code>Scrollable</code> is being dragged.\nA relative offset that points to the bottom-right of a …\nContent is aligned to the end of the <code>Viewport</code>\nHorizontal scrolling\nThe <code>Scrollable</code> is being hovered.\nThe identifier of a <code>Scrollable</code>.\nProperties of a scrollbar within a <code>Scrollable</code>.\nThe amount of relative offset in each direction of a …\nA relative offset that points to the top-left of a …\nA widget that can vertically display an infinite amount of …\nThe appearance of the scrollbar of a scrollable.\nThe appearance of the scroller of a scrollable.\nContent is aligned to the start of the <code>Viewport</code>.\nThe possible status of a <code>Scrollable</code>.\nThe appearance of a scrolable.\nA styling function for a <code>Scrollable</code>.\nVertical scrolling\nThe current <code>Viewport</code> of the <code>Scrollable</code>.\nReturns the <code>AbsoluteOffset</code> of the current <code>Viewport</code>.\nReturns the <code>AbsoluteOffset</code> of the current <code>Viewport</code>, but …\nSets the alignment of the <code>Scrollable</code> .\nThe <code>Background</code> of a scrollbar.\nThe <code>Border</code> of a scrollbar.\nThe <code>Border</code> of the scroller.\nReturns the bounds of the current <code>Viewport</code>.\nThe <code>Color</code> of the scroller.\nThe <code>container::Style</code> of a scrollable.\nReturns the content bounds of the current <code>Viewport</code>.\nThe default style of a <code>Scrollable</code>.\nThe default class produced by the <code>Catalog</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe <code>Background</code> of the gap between a horizontal and …\nReturns the <code>Properties</code> of the horizontal scrollbar, if any.\nThe horizontal <code>Scrollbar</code> appearance.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSets the scrollbar margin of the <code>Scrollable</code> .\nCreates new <code>Properties</code> for use in a <code>Scrollable</code>.\nCreates a custom <code>Id</code>.\nReturns the <code>RelativeOffset</code> of the current <code>Viewport</code>.\nProduces a <code>Task</code> that scrolls the <code>Scrollable</code> with the given …\nThe appearance of the <code>Scroller</code> of a scrollbar.\nSets the scroller width of the <code>Scrollable</code> .\nProduces a <code>Task</code> that snaps the <code>Scrollable</code> with the given <code>Id</code>\nThe <code>Style</code> of a class with the given status.\nCreates a unique <code>Id</code>.\nReturns the <code>Properties</code> of the vertical scrollbar, if any.\nThe vertical <code>Scrollbar</code> appearance.\nSets the scrollbar width of the <code>Scrollable</code> .\nThe amount of horizontal offset\nThe amount of horizontal offset\nThe amount of vertical offset\nThe amount of vertical offset\nThe properties of the horizontal scrollbar.\nThe properties of the vertical scrollbar.\nIndicates if the horizontal scrollbar is being dragged.\nIndicates if the horizontal scrollbar is being hovered.\nIndicates if the vertical scrollbar is being dragged.\nIndicates if the vertical scrollbar is being hovered.\nA <code>Shader</code> event.\nA keyboard event.\nA mouse event.\nA set of methods which allows a <code>Primitive</code> to be rendered.\nThe type of primitive this <code>Program</code> can draw.\nThe state and logic of a <code>Shader</code> widget.\nA window requested a redraw.\nA widget which can render custom shaders with Iced’s <code>wgpu</code>…\nThe internal state of the <code>Program</code>.\nStores custom, user-provided types.\nA touch event.\nA viewing region for displaying computer graphics.\nDraws the <code>Primitive</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns a reference to the data with type <code>T</code> if it exists …\nReturns a mutable reference to the data with type <code>T</code> if it …\nReturns <code>true</code> if <code>Storage</code> contains a type <code>T</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the logical size of the <code>Viewport</code>.\nReturns the current mouse interaction of the <code>Program</code>.\nReturns the physical height of the <code>Viewport</code>.\nReturns the physical size of the <code>Viewport</code>.\nReturns the physical width of the <code>Viewport</code>.\nProcesses the <code>Primitive</code>, allowing for GPU buffer …\nReturns the projection transformation of the <code>Viewport</code>.\nRenders the <code>Primitive</code>.\nReturns the scale factor of the <code>Viewport</code>.\nInserts the data <code>T</code> in to <code>Storage</code>.\nUpdate the internal <code>State</code> of the <code>Program</code>. This can be used …\nCreates a new <code>Viewport</code> with the given physical dimensions …\nAllows the use of <code>AddressMode::ClampToBorder</code> with a border …\nAllows the use of <code>AddressMode::ClampToBorder</code> with a border …\nEnable writes to all channels.\nWhether wgpu should expose adapters that run on top of …\nEnable alpha channel writes\nBlend mode that does standard alpha blending with …\nSupports samplers with anisotropic filtering. Note this isn…\nA ray-tracing acceleration structure binding.\nHandle to a physical graphics and/or compute device.\nInformation about an adapter.\nSrc + Dst\nHow edges should be handled in texture addressing.\nDepth, Stencil, and Color.\nFunction always passes\nblock compressed texture. 16 bytes per block.\nASTC block dimensions\nASTC RGBA channel\nChooses either <code>Opaque</code> or <code>Inherit</code> automatically，depending …\nChooses Immediate -&gt; Mailbox -&gt; Fifo (on web) based on …\nChooses FifoRelaxed -&gt; Fifo based on availability.\nNo explicit minor version is requested, the driver …\n10x10 block compressed texture. 16 bytes per block (1.28 …\n10x5 block compressed texture. 16 bytes per block (2.56 …\n10x6 block compressed texture. 16 bytes per block (2.13 …\n10x8 block compressed texture. 16 bytes per block (1.6 …\n12x10 block compressed texture. 16 bytes per block (1.07 …\n12x12 block compressed texture. 16 bytes per block (0.89 …\n4x4 block compressed texture. 16 bytes per block (8 …\n5x4 block compressed texture. 16 bytes per block (6.4 …\n5x5 block compressed texture. 16 bytes per block (5.12 …\n6x5 block compressed texture. 16 bytes per block (4.27 …\n6x6 block compressed texture. 16 bytes per block (3.56 …\n8x5 block compressed texture. 16 bytes per block (3.2 …\n8x6 block compressed texture. 16 bytes per block (2.67 …\n8x8 block compressed texture. 16 bytes per block (2 …\nSupports non-zero <code>base_vertex</code> parameter to direct indexed …\nAllows the [<code>wgpu::TextureUsages::STORAGE_BINDING</code>] usage on …\nIf not present, the texture can’t be blended into the …\nEnable blue channel writes\nSupported when targeting the web through webassembly with …\nSupports buffer bindings with sizes that aren’t a …\nAllows the user to create arrays of buffers in shaders:\nBack face\nBackends supported by wgpu.\nRepresents the backends that wgpu will use.\n4x4 block compressed texture. 8 bytes per block (4 …\n4x4 block compressed texture. 8 bytes per block (4 …\n4x4 block compressed texture. 16 bytes per block (8 …\n4x4 block compressed texture. 16 bytes per block (8 …\n4x4 block compressed texture. 16 bytes per block (8 …\n4x4 block compressed texture. 16 bytes per block (8 …\n4x4 block compressed texture. 8 bytes per block (4 …\n4x4 block compressed texture. 8 bytes per block (4 …\n4x4 block compressed texture. 16 bytes per block (8 …\n4x4 block compressed texture. 16 bytes per block (8 …\n4x4 block compressed texture. 16 bytes per block (8 …\n4x4 block compressed texture. 16 bytes per block (8 …\n4x4 block compressed texture. 16 bytes per block (8 …\n4x4 block compressed texture. 16 bytes per block (8 …\nBlue, green, red, and alpha channels. 8 bit integer per …\nBlue, green, red, and alpha channels. 8 bit integer per …\nHandle to a binding group.\nDescribes a group of bindings and the resources to be …\nAn element of a <code>BindGroupDescriptor</code>, consisting of a …\nHandle to a binding group layout.\nDescribes a <code>BindGroupLayout</code>.\nDescribes a single binding inside a bind group.\nResource that can be bound to a pipeline.\nSpecific type of a binding.\nDescribes a blend component of a <code>BlendState</code>.\nAlpha blend factor.\nAlpha blend operation.\nDescribe the blend state of a render pipeline, within …\nWebGPU in the browser\nHandle to a GPU-accessible buffer.\nBinding is backed by a buffer.\nA buffer binding.\nIntegral type used for buffer offsets.\nBinding is backed by an array of buffers.\nError occurred when trying to async map a buffer.\nDescribes the segment of a buffer to bind.\nSpecific type of a buffer binding.\nDescribes a <code>Buffer</code>.\nIntegral type used for buffer slice sizes.\nSlice into a <code>Buffer</code>.\nDifferent ways that you can use a buffer.\nRead only view into a mapped buffer.\nWrite only view into mapped buffer.\nEnables clear to zero for textures.\nAmount of times the clipper is invoked. This is also the …\nAmount of primitives that are not culled by the clipper. …\nEnable red, green, and blue channel writes\nSupports comparison samplers.\nBinding is visible from the compute shader of a compute …\nThe device supports compiling and using compute shaders.\nAmount of times a compute shader is invoked. This will be …\nAllows the user to set a …\nBuffer to buffer copy as well as buffer clear offsets and …\nBuffer-Texture copies must have <code>bytes_per_row</code> aligned to …\nAllow a buffer to be the destination buffer for a […\nAllows a texture to be the destination in a  […\nAllow a buffer to be the source buffer for a […\nAllows a texture to be the source in a […\nSupports textures that are cube arrays.\nTriangles with vertices in counter clockwise order are …\nClamp the value to the border of the texture Requires …\nClamp the value to the edge of the texture\nLoads the specified value for this attachment into the …\nRGBA double precision color.\nDescribes the color state of a render pipeline.\nColor write mask. Disabled color channels will not be …\nHandle to a command buffer on the GPU.\nDescribes a <code>CommandBuffer</code>.\nEncodes a series of GPU operations.\nDescribes a <code>CommandEncoder</code>.\nComparison function used for depth and stencil operations.\nUse as a comparison sampler instead of a normal sampler. …\nSpecifies how the alpha channel of the textures should be …\nIn-progress recording of a compute pass.\nDescribes the attachments of a compute pass.\nDescribes the timestamp writes of a compute pass.\nHandle to a compute pipeline.\nDescribes a compute pipeline.\nConstant\nCpu / Software Rendering.\n<code>Instance::create_surface()</code> or a related function failed.\nA cubemap texture. <code>texture_cube</code> in WGSL and <code>textureCube</code> in …\nA cubemap array texture. <code>texture_cube_array</code> in WGSL and …\nTriangles with vertices in clockwise order are considered …\nA one dimensional texture. <code>texture_1d</code> in WGSL and <code>texture1D</code>…\n1D texture\nA two dimensional texture. <code>texture_2d</code> in WGSL and <code>texture2D</code>…\n2D texture\nA two dimensional array texture. <code>texture_2d_array</code> in WGSL …\nA three dimensional texture. <code>texture_3d</code> in WGSL and …\n3D texture\nGenerate debug information in shaders and objects.\nAllows for explicit creation of textures of format …\nSupports depth bias clamping\nBy default, polygon depth is clipped to 0-1 range …\nSupports copies between depth textures and buffers.\nDon’t pass labels to wgpu-hal.\nAllows two outputs from a shader to be used for blending. …\nSupported on Windows 10\nDecrements stencil value by one, clamping on underflow.\nDecrements stencil value by one, wrapping on underflow.\nSampling does the depth reference comparison.\nSpecial depth format with 16 bit integer depth.\nSpecial depth format with at least 24 bit integer depth.\nSpecial depth/stencil format with at least 24 bit integer …\nSpecial depth format with 32 bit floating point depth.\nSpecial depth/stencil format with 32 bit floating point …\nDescribes the biasing setting for the depth target.\nDepth.\nDescribes the depth/stencil state in a render pipeline.\nAfter Device::destroy\nOpen connection to a graphics and/or compute device.\nDescribes a <code>Device</code>.\nReason for “lose the device”.\nSupported physical device types.\nDiscards the resulting value of the render pass for this …\nDiscrete GPU with separate CPU/GPU memory.\nDisplay-P3 color space\nLists various ways the underlying platform does not …\nBinary flags listing features that may or may not be …\nAfter Device::drop\nD.component\nD.alpha\nDirect3D-12 (Windows)\nSelects which DX12 shader compiler to use.\nThe Dxc compiler is new, fast and maintained.\nIntegral type used for dynamic bind group offsets.\n4x4 block compressed texture. 8 bytes per block (4 …\n4x4 block compressed texture. 8 bytes per block (4 …\n4x4 block compressed texture. 16 bytes per block (8 …\n4x4 block compressed texture. 16 bytes per block (8 …\nDummy backend, used for testing.\nFunction passes if new value is equal to existing value. …\nError type\nFilter for error scopes.\n4x4 block compressed texture. 8 bytes per block (4 …\n4x4 block compressed texture. 8 bytes per block (4 …\n4x4 block compressed texture. 8 bytes per block (4 …\n4x4 block compressed texture. 8 bytes per block (4 …\n4x4 block compressed texture. 16 bytes per block (8 …\n4x4 block compressed texture. 16 bytes per block (8 …\nExtent of a texture related operation.\nIf not present, the texture can’t be sampled with a …\nAllows textures with formats “r32float”, “rg32float…\nBinding is visible from the fragment shader of a render …\nAmount of times the fragment shader is ran. Accounts for …\nSupports storage buffers in fragment shaders.\nSupports binding storage buffers and textures to fragment …\nSupports full 32-bit range indices (2^32-1 as opposed to …\nFace of a vertex.\nFeatures that are not guaranteed to be supported.\nPresentation frames are kept in a First-In-First-Out queue …\nPresentation frames are kept in a First-In-First-Out queue …\nPolygons are filled\nTexel mixing mode when sampling between texels.\nThe sampling result is produced based on more than a …\nSampling returns floats.\nTwo half-precision floats (no Rust equiv). <code>vec2&lt;f32&gt;</code> in …\nFour half-precision floats (no Rust equiv). <code>vec4&lt;f32&gt;</code> in …\nOne single-precision float (f32). <code>f32</code> in shaders.\nTwo single-precision floats (f32). <code>vec2&lt;f32&gt;</code> in shaders.\nThree single-precision floats (f32). <code>vec3&lt;f32&gt;</code> in shaders.\nFour single-precision floats (f32). <code>vec4&lt;f32&gt;</code> in shaders.\nOne double-precision float (f64). <code>f32</code> in shaders. Requires …\nTwo double-precision floats (f64). <code>vec2&lt;f32&gt;</code> in shaders. …\nThree double-precision floats (f64). <code>vec3&lt;f32&gt;</code> in shaders. …\nFour double-precision floats (f64). <code>vec4&lt;f32&gt;</code> in shaders. …\nDescribes the fragment processing in a render pipeline.\nFront face\nVertex winding order which classifies the “front” face …\nThe Fxc compiler (default) is old, slow and unmaintained.\nSupported on Linux/Android, the web through webassembly …\nEnable green channel writes\nOpenGL ES-3 (Linux, Android)\nSelects which OpenGL ES 3 minor version to request.\nNo issues.\nFunction passes if new value is greater than existing value\nFunction passes if new value is greater than or equal to …\nfloating-point RGBA, linear-color float can be outside of …\nAdapter that has the highest performance. This is often a …\nIgnore the stencil state for the face.\nSupports different blend operations per color attachment.\nAllow a buffer to be the index buffer in a draw operation.\nAllow a buffer to be the indirect buffer in an indirect …\nSupports indirect drawing and dispatching.\nAllows non-zero value for the <code>first_instance</code> member in …\nA timestamp that is invalid due to the platform not having …\nOpaque globally-unique identifier\nView of a buffer which can be used to copy to/from a …\nView of a buffer which can be used to copy to/from a …\nView of a texture which can be used to copy to/from a …\nView of a texture which can be used to copy to/from a …\nView of a texture which can be used to copy to a texture, …\nView of a texture which can be used to copy to a texture, …\nLayout of a texture in a buffer’s memory.\nSubresource range within an image\nPresentation frames are not queued at all. The moment a …\nIncrements stencil value by one, clamping on overflow.\nIncrements stencil value by one, wrapping on overflow.\nFormat of indices used with pipeline.\nThe alpha channel, if it exists, of the textures is …\nContext for all other wgpu objects. Instance of wgpu.\nVertex data is advanced every instance.\nOptions for creating an instance.\nInstance debugging flags.\nIntegrated GPU with shared CPU/GPU memory.\nBitwise inverts stencil value.\nKeep stencil value unchanged.\nObject debugging label.\nFunction passes if new value less than existing value\nFunction passes if new value is less than or equal to …\nRepresents the sets of limits an adapter/device supports.\nPolygons are drawn as line segments\nVertex data is a list of lines. Each pair of vertices …\nVertex data is a strip of lines. Each set of two adjacent …\nLinear Interpolation\nLoads the existing value for this attachment into the …\nOperation to perform to the output attachment at the start …\nThe swap chain has been lost and needs to be recreated.\nThe surface under the swap chain is lost.\nAdapter that uses the least possible power. This is often …\nWebgpu only allows the MAP_READ and MAP_WRITE buffer usage …\nSize to align mappings.\nAllow a buffer to be mapped for reading using […\nAllow a buffer to be mapped for writing using […\nSupported on macOS/iOS\nSupports sample-rate shading.\nAllows a texture of this format to back a view passed as …\nAllows <code>TextureDescriptor::sample_count</code> to be <code>16</code>.\nAllows <code>TextureDescriptor::sample_count</code> to be <code>2</code>.\nAllows <code>TextureDescriptor::sample_count</code> to be <code>4</code>.\nAllows <code>TextureDescriptor::sample_count</code> to be <code>8</code>.\nEnables multiview render passes and <code>builtin(view_index)</code> in …\nAllows the user to call <code>RenderPass::multi_draw_indirect</code> …\nAllows the user to call …\nPresentation frames are kept in a single-frame queue. …\nPassed to <code>Device::poll</code> to control how and if it should …\nPassed to <code>Device::poll</code> to control how and if it should …\nResult of a maintain operation.\nType of buffer mapping.\nmax(Src, Dst)\nMetal API (Apple platforms)\nmin(Src, Dst)\nRepeat the texture, mirroring it every repeat\nDescribes the multi-sampling state of a render pipeline.\nIf this is true, calls to <code>CommandEncoder::resolve_query_set</code>…\nBinding is not visible from any shader stage.\nSupports textures with mipmaps which have a non power of …\nYUV 4:2:0 chroma subsampled format.\nNearest neighbor sampling.\nFunction never passes\nThe sampling result is produced based on a single color …\nPower usage is not considered when choosing an adapter.\nNo value.\nFunction passes if new value is not equal to existing …\nBlend state of (1 * src) + ((1 - src_alpha) * dst)\nQuery returns a single 64-bit number, serving as an …\nMore information coming soon …\n1.0\n1.0 - Constant\n1.0 - D.component\n1.0 - D.alpha\n1.0 - S.component\n1.0 - S1.component\n1.0 - S1.alpha\n1.0 - S.alpha\nThe alpha channel, if it exists, of the textures is …\n[0, 0, 0, 1]\n[1, 1, 1, 1]\nPair of load and store operations for an attachment aspect.\nOrigin of a copy from a 2D image.\nOrigin of a copy to/from a texture.\nOther or Unknown.\nCatch only out-of-memory errors.\nThere is no more memory left to allocate a new frame.\nOut of memory error\nThe underlying surface has changed, and therefore the swap …\nThe surface under the swap chain has changed.\nAllows the user to create bind groups containing arrays …\nEnables use of Pipeline Statistics Queries. These queries …\nAllows the user to set <code>PolygonMode::Line</code> in …\nAllows the user to set <code>PolygonMode::Point</code> in …\nBlend mode that does standard alpha blending with …\nAll the apis that wgpu offers first tier of support for.\nAllows the use of push constants: small, fast bits of …\nAlignment all push constants need\nHandle to a pipeline layout.\nDescribes a <code>PipelineLayout</code>.\nQuery returns up to 5 64-bit numbers based on the given …\nFlags for which pipeline data should be recorded.\nPlane 0.\nPlane 1.\nPlane 2.\nPolygons are drawn as points\nVertex data is a list of points. Each vertex is a new …\nCheck the device for a single time without blocking.\nCheck the device for a single time without blocking.\nType of drawing mode for polygons\nThe alpha channel, if it exists, of the textures is …\nPower Preference when choosing a physical adapter.\nThe alpha channel, if it exists, of the textures is …\nColor spaces supported on the web.\nBehavior of the presentation engine based on frame rate.\nNanosecond timestamp used by the presentation engine.\nDescribes the state of primitive assembly and …\nPrimitive type the input mesh is composed of.\nA range of push constant memory to pass to a shader stage.\nAllow a buffer to be the destination buffer for a […\nAn offset into the query resolve buffer has to be aligned …\nMaximum queries in a query set\nSize of a single piece of query data.\nHandle to a query set.\nDescribes a <code>QuerySet</code>.\nType of query contained in a QuerySet.\nHandle to a command queue on a device.\nA write-only view into a staging buffer.\nRed channel only. 16 bit float per channel. Float in …\nRed channel only. 16 bit integer per channel. Signed in …\nRed channel only. 16 bit integer per channel. [0, 65535] …\nRed channel only. 16 bit integer per channel. Unsigned in …\nRed channel only. 16 bit integer per channel. [0, 65535] …\nRed channel only. 32 bit float per channel. Float in …\nRed channel only. 32 bit integer per channel. Signed in …\nRed channel only. 32 bit integer per channel. Unsigned in …\nRed channel only. 8 bit integer per channel. Signed in …\nRed channel only. 8 bit integer per channel. [-127, 127] …\nRed channel only. 8 bit integer per channel. Unsigned in …\nRed channel only. 8 bit integer per channel. [0, 255] …\nAllows for the creation of ray-tracing queries within …\nAllows for the creation of ray-tracing acceleration …\nSupports reading from a depth/stencil texture while using …\nEnable red channel writes\nAllows a texture to be an output attachment of a render …\nDefault blending state that replaces destination with the …\nBlend mode that does no color blending, just overwrites …\nAllows for usage of textures of format …\nRaw window &amp; display handle.\nMap only for reading\nThe texture can only be read in the shader and it must be …\nThe texture can be both read and written in the shader and …\nPre-prepared reusable bundle of GPU operations.\nDescribes the depth/stencil attachment for render bundles.\nDescribes a <code>RenderBundle</code>.\nEncodes a series of GPU operations into a reusable “…\nDescribes a <code>RenderBundleEncoder</code>.\nIn-progress recording of a render pass: a list of render …\nDescribes a color attachment to a <code>RenderPass</code>.\nDescribes a depth/stencil attachment to a <code>RenderPass</code>.\nDescribes the attachments of a render pass.\nDescribes the timestamp writes of a render pass.\nHandle to a rendering (graphics) pipeline.\nDescribes a render (graphics) pipeline.\nRepeat the texture in a tiling fashion\nReplace stencil value with value provided in most recent …\nAfter replacing the device_lost_callback\nAdditional information required when requesting an adapter.\nOptions for requesting adapter.\nRequesting a device from an <code>Adapter</code> failed.\nDst - Src\nRed, green, and blue channels. 11 bit float with no sign …\nRed and green channels. 16 bit float per channel. Float in …\nRed and green channels. 16 bit integer per channel. Signed …\nRed and green channels. 16 bit integer per channel. [0, …\nRed and green channels. 16 bit integer per channel. …\nRed and green channels. 16 bit integer per channel. [0, …\nRed and green channels. 32 bit float per channel. Float in …\nRed and green channels. 32 bit integer per channel. Signed …\nRed and green channels. 32 bit integer per channel. …\nRed and green channels. 8 bit integer per channel. Signed …\nRed and green channels. 8 bit integer per channel. [-127, …\nRed and green channels. 8 bit integer per channel. …\nRed and green channels. 8 bit integer per channel. [0, 255]…\nRed, green, blue, and alpha channels. 10 bit integer for …\nRed, green, blue, and alpha channels. 10 bit integer for …\nPacked unsigned float with 9 bits mantisa for each RGB …\nRed, green, blue, and alpha channels. 16 bit float per …\nRed, green, blue, and alpha channels. 16 bit integer per …\nRed, green, blue, and alpha. 16 bit integer per channel. […\nRed, green, blue, and alpha channels. 16 bit integer per …\nRed, green, blue, and alpha channels. 16 bit integer per …\nRed, green, blue, and alpha channels. 32 bit float per …\nRed, green, blue, and alpha channels. 32 bit integer per …\nRed, green, blue, and alpha channels. 32 bit integer per …\nRed, green, blue, and alpha channels. 8 bit integer per …\nRed, green, blue, and alpha channels. 8 bit integer per …\nRed, green, blue, and alpha channels. 8 bit integer per …\nRed, green, blue, and alpha channels. 8 bit integer per …\nRed, green, blue, and alpha channels. 8 bit integer per …\nAllows shaders to index sampled texture and storage buffer …\nAll the apis that wgpu offers second tier of support for. …\nAllows shaders to use the <code>early_depth_test</code> attribute.\nAllows shaders to acquire the FP16 ability\nEnables 64-bit floating point types in SPIR-V shaders.\nAllows shaders to use i16. Not currently supported in <code>naga</code>…\nEnables <code>builtin(primitive_index)</code> in fragment shaders.\nAllows vertex shaders to have outputs which are not …\nEnables creating shader modules from SPIR-V binary data …\nAllow a buffer to be a <code>BufferBindingType::Storage</code> inside a …\nAllows a texture to be a <code>BindingType::StorageTexture</code> in a …\nWhen used as a STORAGE texture, then a texture with this …\nAllows the user to create uniform arrays of storage …\nSupports specifying which view formats are allowed when …\nHandle to a sampler.\nBinding is a sampler.\nA sampler that can be used to sample a texture.\nBinding is backed by an array of samplers.\nSpecific type of a sampler binding.\nColor variation to use when sampler addressing mode is …\nDescribes a <code>Sampler</code>.\nIntegral type used for binding locations in shaders.\nCollections of shader features a device supports if they …\nHandle to a compiled shader module.\nDescriptor for use with <code>Device::create_shader_module</code>.\nDescriptor for a shader module given by SPIR-V binary, for …\nSource of a shader module.\nDescribes the shader stages that a binding will be visible …\nSampling returns signed integers.\nTwo signed shorts (i16). <code>vec2&lt;i32&gt;</code> in shaders.\nFour signed shorts (i16). <code>vec4&lt;i32&gt;</code> in shaders.\nOne signed int (i32). <code>i32</code> in shaders.\nTwo signed ints (i32). <code>vec2&lt;i32&gt;</code> in shaders.\nThree signed ints (i32). <code>vec3&lt;i32&gt;</code> in shaders.\nFour signed ints (i32). <code>vec4&lt;i32&gt;</code> in shaders.\nTwo signed bytes (i8). <code>vec2&lt;i32&gt;</code> in shaders.\nFour signed bytes (i8). <code>vec4&lt;i32&gt;</code> in shaders.\nExtremely limited shaders, including a total instruction …\nMissing minor features and storage images.\nWebGPU supports shader module 5.\nTwo signed shorts (i16). [-32767, 32767] converted to …\nFour signed shorts (i16). [-32767, 32767] converted to …\nTwo signed bytes (i8). [-127, 127] converted to float [-1, …\nFour signed bytes (i8). [-127, 127] converted to float […\nSome value of type <code>T</code>.\nS.component\nS1.component\nS1.alpha\nS.alpha\nmin(S.alpha, 1.0 - D.alpha)\nsRGB color space\nStencil format with 8 bit integer stencil.\nDescribes stencil state in a render pipeline.\nStencil.\nOperation to perform on the stencil value.\nState of the stencil operation (fixed-pipeline stage).\nA storage buffer.\nA storage texture.\nSpecific type of a sample in a texture binding.\nStores the resulting value of the render pass for this …\nOperation to perform to the output attachment at the end …\nIdentifier for a particular call to <code>Queue::submit</code>. Can be …\nThere are no active submissions in flight as of the …\nThe swap chain is operational, but it does no longer …\nSrc - Dst\nHandle to a presentable surface.\nDefines the capabilities of a given surface and adapter.\nDescribes a <code>Surface</code>.\nResult of an unsuccessful call to …\nStatus of the received surface image.\nThe window/canvas/surface/swap-chain/etc. a surface is …\nThe window/canvas/surface/swap-chain/etc. a surface is …\nSurface texture that can be rendered to. Result of a …\nEnables device specific texture format features.\nAllows a texture to be a <code>BindingType::Texture</code> in a bind …\nAllows the user to create uniform arrays of textures in …\nEnables ASTC family of compressed textures. ASTC textures …\nEnables ASTC HDR family of compressed textures.\nEnables BCn family of compressed textures. All BCn …\nEnables ETC family of compressed textures. All ETC …\nEnables normalized <code>16-bit</code> texture formats.\nAllows for creation of textures of format …\nEnables use of Timestamp Queries. These queries tell the …\nAllows for timestamp queries inside render passes.\nHandle to a texture on the GPU.\nA texture binding.\nKind of data the texture holds.\nDescribes a <code>Texture</code>.\nDimensionality of a texture.\nUnderlying texture data format.\nFeature flags for a texture format.\nFeatures supported by a given texture format\nSpecific type of a sample in a texture binding.\nDifferent ways that you can use a texture.\nHandle to a texture view.\nBinding is backed by a texture.\nBinding is backed by an array of textures.\nDescribes a <code>TextureView</code>.\nDimensions of a particular texture view.\nA timeout was encountered while trying to acquire the next …\nUnable to get the next frame, timed out.\nQuery returns a 64-bit number indicating the GPU-timestamp …\n[0, 0, 0, 0]\nVertex data is a list of triangles. Each set of 3 vertices …\nVertex data is a triangle strip. Each set of three …\nAllow a buffer to be a <code>BufferBindingType::Uniform</code> inside a …\nAllows shaders to index uniform buffer and storage texture …\nWith this feature not present, there are the following …\nSupports buffers to combine <code>BufferUsages::INDEX</code> with …\nSampling returns unsigned integers.\nIndices are 16 bit unsigned integers.\nTwo unsigned shorts (u16). <code>vec2&lt;u32&gt;</code> in shaders.\nFour unsigned shorts (u16). <code>vec4&lt;u32&gt;</code> in shaders.\nIndices are 32 bit unsigned integers.\nOne unsigned int (u32). <code>u32</code> in shaders.\nTwo unsigned ints (u32). <code>vec2&lt;u32&gt;</code> in shaders.\nThree unsigned ints (u32). <code>vec3&lt;u32&gt;</code> in shaders.\nFour unsigned ints (u32). <code>vec4&lt;u32&gt;</code> in shaders.\nTwo unsigned bytes (u8). <code>vec2&lt;u32&gt;</code> in shaders.\nFour unsigned bytes (u8). <code>vec4&lt;u32&gt;</code> in shaders.\nType for the callback of uncaptured error handler\nA buffer for uniform values.\nTriggered by driver\n8 bit integer RGBA, [0, 255] converted to/from …\nTwo unsigned shorts (u16). [0, 65535] converted to float […\nFour unsigned shorts (u16). [0, 65535] converted to float […\nTwo unsigned bytes (u8). [0, 255] converted to float [0, 1]…\nFour unsigned bytes (u8). [0, 255] converted to float [0, 1…\n8 bit integer RGBA, Srgb-color [0, 255] converted to/from …\nEnable validation, if possible.\nBinding is visible from the vertex shader of a render …\nAllow a buffer to be the vertex buffer in a draw operation.\nIf this is true, use of <code>@builtin(vertex_index)</code> and …\nEnables using 64-bit types for vertex attributes.\nBinding is visible from the vertex and fragment shaders of …\nAmount of times the vertex shader is ran. Accounts for the …\nSupports storage buffers in vertex shaders.\nVertex buffer strides have to be aligned to this number.\nEnables bindings of writable storage buffers and textures …\nSupports specifying which view format values are allowed …\nSupported on Windows, Linux/Android, and macOS/iOS via …\nCatch only validation errors.\nValidation error, signifying a bug in code or data\nRequest an ES 3.0 context.\nRequest an ES 3.1 context.\nRequest an ES 3.2 context.\nVertex data is advanced every vertex.\nVertex inputs (attributes) to shaders.\nDescribes how the vertex buffer is interpreted.\nVertex Format for a <code>VertexAttribute</code> (input).\nDescribes the vertex processing in a render pipeline.\nWhether a vertex buffer is indexed by vertex or by …\nVirtual / Hosted.\nVulkan API\nSupports all the texture usages described in WebGPU. If …\nSame as WaitForSubmissionIndex but waits for the most …\nSame as WaitForSubmissionIndex but waits for the most …\nOn wgpu-core based backends, block until the given …\nOn wgpu-core based backends, block until the given …\nWGSL module as a string slice.\nWindow handle producer.\nSuper trait for window handles as used in <code>SurfaceTarget</code>.\nMap only for writing\nThe texture can only be written in the shader and it:\nZero origin.\nZero origin.\n0.0\nSet stencil value to zero.\nOn the Metal backend, this is equivalent to …\nAlpha component of the color\nAdds an <code>Srgb</code> suffix to the given texture format, if the …\nHow to deal with out of bounds accesses in the u (i.e. x) …\nHow to deal with out of bounds accesses in the v (i.e. y) …\nHow to deal with out of bounds accesses in the w (i.e. z) …\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nMask of all features that are only available when …\nMask of all features which are part of the upstream WebGPU …\nValid bits for <code>TextureDescriptor::Usage</code> provided for …\nAlpha equation.\nSpecifies how the alpha channel of the textures should be …\nList of supported alpha modes to use with the given …\nWhen enabled, produces another sample mask per pixel based …\nMust be at least 1. If this is not 1, all filter modes …\nReturns <code>true</code> if any backend feature is enabled for the …\nLayer count. If <code>Some(count)</code>, <code>base_array_layer + count</code> must …\nLayer count. If <code>Some(count)</code>, <code>base_array_layer + count</code> must …\nThe stride, in bytes, between elements of this buffer.\nReturn the binding view of the entire buffer.\nReturn the binding view of the entire buffer.\nReturns the inner hal Surface using a callback. The hal …\nReturn a reference to a specific backend instance, if …\nApply a callback to this <code>Adapter</code>’s underlying backend …\nApply a callback to this <code>Device</code>’s underlying backend …\nReturns the inner hal Texture using a callback. The hal …\nMake an <code>ImageCopyTexture</code> representing the whole texture.\nThe copy aspect.\nThe copy aspect.\nAspect of the texture. Color textures must be …\nThe copy aspect.\nThe copy aspect.\nAspect of the texture. Color textures must be …\nReturns the aspect-specific format of the original format\nThe list of attributes which comprise a single vertex.\nBlue component of the color\nBack face mode.\nBackend used for device\nWhich <code>Backends</code> to enable.\nBase array layer.\nBase array layer.\nBase mip level.\nBase mip level.\nBegins recording of a compute pass.\nStart a occlusion query on this render pass. It can be …\nStart a pipeline statistics query on this render pass. It …\nStart a pipeline statistics query on this render pass. It …\nBegins recording of a render pass.\nThe index of the query set at which a start timestamp of …\nThe index of the query set at which a start timestamp of …\nDepth bias state.\nBind groups that this pipeline uses. The first entry will …\nSlot for which binding provides resource. Corresponds to …\nBinding index. Must match shader index and be unique …\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nGet the underlying bits value.\nGet the underlying bits value.\nGet the underlying bits value.\nGet the underlying bits value.\nGet the underlying bits value.\nGet the underlying bits value.\nGet the underlying bits value.\nGet the underlying bits value.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe blending that is used for this pipeline.\nThe number of bytes one texel block occupies during an …\nReturns the dimension of a block of texels.\nThe number of bytes one texel block occupies during an …\nBorder color to use when address_mode is …\nThe buffer to be copied to/from.\nThe buffer to bind.\nThe buffer to be copied to/from.\nThe format of any vertex buffers used with this pipeline.\nBytes per “row” in an image.\nCompares every limits within self is within the limits …\nCompares every limits within self is within the limits …\nDepth bias clamp value (absolute).\nClears buffer to zero.\nClears texture to zero.\nColor equation.\nThe color attachments of the render pass.\nThe formats of the color attachments that this render …\nThe color space of this texture.\nThe color space of this texture.\nIf this is enabled, this is a comparison sampler using the …\nComparison function that determines if the fail_op or …\nSurface that is required to be presentable with the …\nSurface that is required to be presentable with the …\nGet the texture dimension required of this texture view …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nAll flags that indicate if the backend is WebGPU compliant\nReturns the number of components this format has.\nReturns the number of components this format has taking …\nInitializes <code>Surface</code> for presentation.\nIf set to true, the primitives are rendered with …\nConstant depth biasing factor, in basic units of the depth …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nReturns true if the bitflags contains bits that are not …\nReturns true if the bitflags contains bits that are not …\nReturns true if the bitflags contains bits that are not …\nReturns true if the bitflags contains bits that are not …\nReturns true if the bitflags contains bits that are not …\nReturns true if the bitflags contains bits that are not …\nReturns true if the bitflags contains bits that are not …\nReturns true if the bitflags contains bits that are not …\nReturns true if the bitflags contains bits that are not …\nCopy data from one buffer to another.\nCopy data from a buffer to a texture.\nCopy data from a texture to a buffer.\nCopy data from one texture to another.\nTotal count of queries the set contains. Must not be zero. …\nThe number of samples calculated per pixel (for MSAA). For …\nIf this value is Some, indicates this entry is an array. …\nConverts a wgpu-hal <code>ExposedAdapter</code> to a wgpu <code>Adapter</code>.\nCreates a new <code>BindGroup</code>.\nCreates a <code>BindGroupLayout</code>.\nCreates a <code>Buffer</code>.\nCreates a <code>Buffer</code> from a wgpu-hal Buffer.\nCreates an empty <code>CommandEncoder</code>.\nCreates a <code>ComputePipeline</code>.\nCreate a wgpu <code>Device</code> and <code>Queue</code> from a wgpu-hal <code>OpenDevice</code>\nCreates a <code>PipelineLayout</code>.\nCreates a new <code>QuerySet</code>.\nCreates an empty <code>RenderBundleEncoder</code>.\nCreates a <code>RenderPipeline</code>.\nCreates a new <code>Sampler</code>.\nCreates a shader module from either SPIR-V or WGSL source …\nCreates a shader module from SPIR-V binary directly.\nCreates a shader module from either SPIR-V or WGSL source …\nCreates a new surface targeting a given …\nCreates a new surface targeting a given …\nCreates a new <code>Texture</code>.\nCreates a <code>Texture</code> from a wgpu-hal Texture.\nCreates a view of this texture.\nThe face culling mode.\nEnable debugging and validation flags.\nCreates a new instance of wgpu with default options.\nComparison function used to compare depth values in the …\nOperation that is performed when depth test fails but …\nWhat operations will be performed on the depth part of the …\nReturns the depth or layer count of this <code>Texture</code>.\nThe depth of the extent or the number of array layers\nIf the depth aspect of the depth stencil attachment is …\nThe effect of draw calls on the depth and stencil aspects …\nInformation about the depth attachment that this render …\nThe depth and stencil attachment of the render pass, if …\nIf disabled, depth will not be written to.\nDesired maximum number of frames that the presentation …\nDestroy this device.\nDestroy the associated native resources as soon as …\nDestroy the associated native resources as soon as …\n<code>Backend</code>-specific device ID of the adapter\nType of device\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nReturns the dimension of this <code>Texture</code>.\nDimensions of the texture.\nThe dimension of the texture view. For 1D textures, this …\nDispatches compute work operations.\nDispatches compute work operations, based on the contents …\nThese default limits are guaranteed to be compatible with …\nThese default limits are guaranteed to be compatible with …\nDraws primitives from the active vertex buffer(s).\nDraws primitives from the active vertex buffer(s).\nDraws indexed primitives using the active index buffer and …\nDraws indexed primitives using the active index buffer and …\nDraws indexed primitives using the active index buffer and …\nDraws indexed primitives using the active index buffer and …\nDraws primitives from the active vertex buffer(s) based on …\nDraws primitives from the active vertex buffer(s) based on …\nDriver name\nDriver info\nMultiplier for the destination, which is stored in the …\nWhich DX12 shader compiler to use.\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nEnd the occlusion query on this render pass. It can be …\nThe index of the query set at which an end timestamp of …\nThe index of the query set at which an end timestamp of …\nEnd the pipeline statistics query on this render pass. It …\nEnd the pipeline statistics query on this render pass. It …\nThe resources to bind to this bind group.\nArray of entries in this BindGroupLayout\nThe name of the entry point in the compiled shader. There …\nThe name of the entry point in the compiled shader. There …\nThe name of the entry point in the compiled shader. There …\nRetrieves all available <code>Adapter</code>s that match the given …\nExecute a render bundle, which is a set of pre-recorded …\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nOperation that is preformed when stencil test fails.\nThe features which can be used to create devices on this …\nThe features which can be used on this device.\nFinishes recording and returns a <code>CommandBuffer</code> that can be …\nFinishes recording and returns a <code>RenderBundle</code> that can be …\nCombined boolean flags.\nAdditional property flags for the format.\nFlags to tune the behavior of the instance.\nIndicates that only a fallback adapter can be returned. …\nIndicates that only a fallback adapter can be returned. …\nReturns the format of this <code>Texture</code>.\nThe texture format of the swap chain. The only formats …\nFormat of the texture.\nThe <code>TextureFormat</code> of the image that this pipeline will …\nFormat of the texture view. Either must be the same as the …\nFormat of the depth/stencil buffer, must be special depth …\nFormat of the input\nFormat of the attachment.\nList of supported formats to use with the given adapter. …\nThe compiled fragment stage, its entry point, and the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.")