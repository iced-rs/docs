searchState.loadedDescShard("iced_wgpu", 0, "A <code>wgpu</code> renderer for Iced.\nA <code>wgpu</code> graphics renderer for <code>iced</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nBuild and draw geometry.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDraw custom primitives.\nConfigure a renderer.\nDisplay rendering results on windows.\nA frame for drawing some geometry.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new <code>Frame</code> with the given <code>Size</code>.\nCreates a new <code>Frame</code> with the given clip bounds.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nA batch of primitives.\nAn instance of a specific <code>Primitive</code>.\nA set of methods which allows a <code>Primitive</code> to be rendered.\nA renderer than can draw custom primitives.\nStores custom, user-provided types.\nThe bounds of the <code>Instance</code>.\nDraws a custom primitive.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns a reference to the data with type <code>T</code> if it exists …\nReturns a mutable reference to the data with type <code>T</code> if it …\nReturns <code>true</code> if <code>Storage</code> contains a type <code>T</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new <code>Instance</code> with the given <code>Primitive</code>.\nProcesses the <code>Primitive</code>, allowing for GPU buffer …\nThe <code>Primitive</code> to render.\nRenders the <code>Primitive</code>.\nInserts the data <code>T</code> in to <code>Storage</code>.\nThe settings of a <code>Renderer</code>.\nThe antialiasing strategy that will be used for triangle …\nThe graphics backends to use.\nThe default <code>Font</code> to use.\nThe default size of text.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe present mode of the <code>Renderer</code>.\nObtains a <code>wgpu::PresentMode</code> from the current environment …\nHandle to a presentable surface.\nReturns the inner hal Surface using a callback. The hal …\nConnect a window with a renderer.\nInitializes <code>Surface</code> for presentation.\nReturns the argument unchanged.\nReturns the capabilities of the surface when used with the …\nReturns the next texture to be presented by the swapchain …\nReturn a default <code>SurfaceConfiguration</code> from width and …\nReturns a globally-unique identifier for this <code>Surface</code>.\nCalls <code>U::from(self)</code>.\nA window graphics backend for iced powered by <code>wgpu</code>.\nA compositor error.\nThe surface is not compatible.\nNo adapter was found for the options requested.\nNo device request succeeded.\nThe surface creation failed.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a <code>Compositor</code> with the given <code>Settings</code> and window.\nPresents the given primitives with the given <code>Compositor</code>.\nRequests a new <code>Compositor</code> with the given <code>Settings</code>.\nRenders the current surface to an offscreen buffer.")